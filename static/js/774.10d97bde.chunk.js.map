{"version":3,"file":"static/js/774.10d97bde.chunk.js","mappings":"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","sources":["babylon/meshOnTheGround.js"],"sourcesContent":["export async function createScene(engine, canvas, BABYLON) {\r\n  var fileInput = document.getElementById(\"loadFile\");\r\n  if (!fileInput) {\r\n    fileInput = document.createElement(\"INPUT\");\r\n    fileInput.setAttribute(\"id\", \"loadFile\");\r\n    fileInput.setAttribute(\"type\", \"file\");\r\n    fileInput.style.position = \"absolute\";\r\n    fileInput.style.top = \"80px\";\r\n    fileInput.style.width = \"200px\";\r\n    fileInput.style.left = \"0px\";\r\n    document.body.children[0].appendChild(fileInput);\r\n  }\r\n\r\n  console.clear();\r\n  var scene = new BABYLON.Scene(engine);\r\n  scene.useRightHandedSystem = true;\r\n\r\n  var camera = new BABYLON.ArcRotateCamera(\"camera\", BABYLON.Tools.ToRadians(90), BABYLON.Tools.ToRadians(65), 10, BABYLON.Vector3.Zero(), scene);\r\n  camera.setTarget(new BABYLON.Vector3(0.07, 1.14, 0.06));\r\n  camera.alpha = 1.8;\r\n  camera.beta = 1.6;\r\n  camera.radius = 4.8;\r\n  camera.attachControl(canvas, true);\r\n  camera.inertia = 0.4;\r\n  camera.wheelDeltaPercentage = 0.3;\r\n  camera.panningSensibility = 10000;\r\n  camera.minZ = 0.1;\r\n  camera.maxZ = 100000;\r\n  camera.zoomToMouseLocation = true;\r\n\r\n  var light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\r\n  light.intensity = 0.7;\r\n\r\n  let assetsManager = new BABYLON.AssetsManager(scene);\r\n\r\n  var advancedTexture_upload = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UploadButtonUI\");\r\n  var fileInput = document.createElement(\"input\");\r\n  fileInput.type = \"file\";\r\n  fileInput.accept = \".glb\";\r\n  fileInput.style.display = \"none\";\r\n  document.body.appendChild(fileInput);\r\n\r\n  var button = BABYLON.GUI.Button.CreateSimpleButton(\"uploadBtn\", \"Upload GLB File\");\r\n  button.width = \"150px\";\r\n  button.height = \"40px\";\r\n  button.color = \"white\";\r\n  button.background = \"green\";\r\n  button.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT;\r\n  button.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_BOTTOM;\r\n  button.onPointerClickObservable.add(() => {\r\n    fileInput.click();\r\n  });\r\n  advancedTexture_upload.addControl(button);\r\n\r\n  assetsManager.onTaskSuccessObservable.add(function (task) {\r\n    const model = task.loadedMeshes[0];\r\n\r\n    model.normalizeToUnitCube(true);\r\n\r\n    model.getChildMeshes().forEach((m) => {\r\n      m.computeWorldMatrix(true);\r\n      m.refreshBoundingInfo();\r\n    });\r\n\r\n    const bounding = getAggregateBoundingInfo(model, true);\r\n    const minY = bounding.boundingInfo.boundingBox.minimumWorld.y;\r\n    const center = bounding.boundingInfo.boundingBox.centerWorld;\r\n\r\n    model.position.y -= minY;\r\n\r\n    const size = bounding.boundingInfo.boundingBox.maximum.subtract(bounding.boundingInfo.boundingBox.minimum);\r\n    const box = BABYLON.MeshBuilder.CreateBox(\"box\", { width: size.x, height: size.y, depth: size.z }, scene);\r\n    box.position = center;\r\n    box.position.y -= minY;\r\n    box.visibility = 0.3;\r\n\r\n    const environment = scene.createDefaultEnvironment({\r\n      createGround: true,\r\n      createSkybox: false,\r\n      enableGroundMirror: true,\r\n      groundMirrorSizeRatio: 0.15,\r\n    });\r\n  });\r\n\r\n  assetsManager.onTaskErrorObservable.add(function (task) {\r\n    console.log(\"task failed\", task.errorObject.message, task.errorObject.exception);\r\n  });\r\n\r\n  fileInput.onchange = function (evt) {\r\n    var files = evt.target.files;\r\n    var filename = files[0].name;\r\n    var blob = new Blob([files[0]]);\r\n\r\n    BABYLON.FilesInput.FilesToLoad[filename.toLowerCase()] = blob;\r\n    assetsManager.addMeshTask(\"task\", \"\", \"file:\", filename);\r\n\r\n    assetsManager.onFinish = function (tasks) {\r\n      fileInput.value = \"\";\r\n    };\r\n\r\n    assetsManager.load();\r\n  };\r\n\r\n  function getAggregateBoundingInfo(transformNode, hasChild) {\r\n    let meshes = transformNode.getChildMeshes();\r\n    if (hasChild && meshes.length === 0) return null;\r\n\r\n    let aggregateMin = null;\r\n    let aggregateMax = null;\r\n    let totalCenter = BABYLON.Vector3.Zero();\r\n\r\n    if (hasChild) {\r\n      aggregateMin = meshes[0].getBoundingInfo().boundingBox.minimumWorld.clone();\r\n      aggregateMax = meshes[0].getBoundingInfo().boundingBox.maximumWorld.clone();\r\n\r\n      for (let i = 0; i < meshes.length; i++) {\r\n        meshes[i].refreshBoundingInfo(true);\r\n        meshes[i].computeWorldMatrix(true); // 갱신된 변환 정보 반영\r\n        const boundingInfo = meshes[i].getBoundingInfo();\r\n        aggregateMin = BABYLON.Vector3.Minimize(aggregateMin, boundingInfo.boundingBox.minimumWorld);\r\n        aggregateMax = BABYLON.Vector3.Maximize(aggregateMax, boundingInfo.boundingBox.maximumWorld);\r\n\r\n        totalCenter.addInPlace(boundingInfo.boundingBox.centerWorld);\r\n      }\r\n\r\n      totalCenter.scaleInPlace(1 / meshes.length); // 평균 중심점 계산\r\n    } else {\r\n      aggregateMin = transformNode.getBoundingInfo().boundingBox.minimumWorld.clone();\r\n      aggregateMax = transformNode.getBoundingInfo().boundingBox.maximumWorld.clone();\r\n\r\n      transformNode.refreshBoundingInfo(true);\r\n      transformNode.computeWorldMatrix(true); // 갱신된 변환 정보 반영\r\n      const boundingInfo = transformNode.getBoundingInfo();\r\n      aggregateMin = BABYLON.Vector3.Minimize(aggregateMin, boundingInfo.boundingBox.minimumWorld);\r\n      aggregateMax = BABYLON.Vector3.Maximize(aggregateMax, boundingInfo.boundingBox.maximumWorld);\r\n\r\n      totalCenter.addInPlace(boundingInfo.boundingBox.centerWorld);\r\n    }\r\n\r\n    return {\r\n      boundingInfo: new BABYLON.BoundingInfo(aggregateMin, aggregateMax),\r\n      averageCenter: totalCenter,\r\n    };\r\n  }\r\n  return scene;\r\n}\r\n"],"names":["async","createScene","engine","canvas","BABYLON","fileInput","document","getElementById","createElement","setAttribute","style","position","top","width","left","body","children","appendChild","console","clear","scene","Scene","useRightHandedSystem","camera","ArcRotateCamera","Tools","ToRadians","Vector3","Zero","setTarget","alpha","beta","radius","attachControl","inertia","wheelDeltaPercentage","panningSensibility","minZ","maxZ","zoomToMouseLocation","HemisphericLight","intensity","assetsManager","AssetsManager","advancedTexture_upload","GUI","AdvancedDynamicTexture","CreateFullscreenUI","type","accept","display","button","Button","CreateSimpleButton","height","color","background","horizontalAlignment","Control","HORIZONTAL_ALIGNMENT_RIGHT","verticalAlignment","VERTICAL_ALIGNMENT_BOTTOM","onPointerClickObservable","add","click","addControl","onTaskSuccessObservable","task","model","loadedMeshes","normalizeToUnitCube","getChildMeshes","forEach","m","computeWorldMatrix","refreshBoundingInfo","bounding","transformNode","hasChild","meshes","length","aggregateMin","aggregateMax","totalCenter","getBoundingInfo","boundingBox","minimumWorld","clone","maximumWorld","i","boundingInfo","Minimize","Maximize","addInPlace","centerWorld","scaleInPlace","BoundingInfo","averageCenter","getAggregateBoundingInfo","minY","y","center","size","maximum","subtract","minimum","box","MeshBuilder","CreateBox","x","depth","z","visibility","createDefaultEnvironment","createGround","createSkybox","enableGroundMirror","groundMirrorSizeRatio","onTaskErrorObservable","log","errorObject","message","exception","onchange","evt","files","target","filename","name","blob","Blob","FilesInput","FilesToLoad","toLowerCase","addMeshTask","onFinish","tasks","value","load"],"sourceRoot":""}