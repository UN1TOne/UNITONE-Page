{"version":3,"file":"static/js/751.b0e1b610.chunk.js","mappings":"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","sources":["babylon/image2Particle.js"],"sourcesContent":["let images = [\r\n  \"https://raw.githubusercontent.com/UN1TOne/3DAsset/master/Images/UNIT logo transparent.png\",\r\n  \"https://www.dreit.ru/images/codepen/threejs-morphing/Google_2015_logo.svg\",\r\n  \"https://www.dreit.ru/images/codepen/threejs-morphing/Node.js_logo.svg\",\r\n  \"https://www.dreit.ru/images/codepen/threejs-morphing/SoundCloud_logo.svg\",\r\n  \"https://www.dreit.ru/images/codepen/threejs-morphing/Git.svg\",\r\n  \"https://www.dreit.ru/images/codepen/threejs-morphing/Pepsi_logo_2008.svg\",\r\n];\r\n\r\nexport function createScene(engine, canvas, BABYLON) {\r\n  var scene = new BABYLON.Scene(engine);\r\n  scene.useRightHandedSystem = true;\r\n  scene.clearColor = new BABYLON.Color4(0, 0, 0, 1);\r\n\r\n  // Create camera and light\r\n  var light = new BABYLON.PointLight(\"Point\", new BABYLON.Vector3(5, 10, 5), scene);\r\n  var camera = new BABYLON.ArcRotateCamera(\"camera\", 1.547, 1.46, 5.5, BABYLON.Vector3.Zero(), scene);\r\n  camera.attachControl(canvas, true);\r\n  camera.inertia = 0.4;\r\n  camera.wheelDeltaPercentage = 0.3;\r\n  camera.panningSensibility = 10000;\r\n\r\n  var materials = images.map((image, index) => {\r\n    var mat = new BABYLON.StandardMaterial(`mat${index + 1}`, scene);\r\n    var texture = new BABYLON.Texture(image, scene);\r\n    mat.diffuseTexture = texture;\r\n    texture.hasAlpha = true;\r\n    mat.useAlphaFromDiffuseTexture = true;\r\n    return mat;\r\n  });\r\n\r\n  var planes = materials.map((mat, index) => {\r\n    var plane = BABYLON.MeshBuilder.CreatePlane(`plane${index + 1}`, { width: 12, height: 6 }, scene);\r\n    plane.material = mat;\r\n    plane.setEnabled(false);\r\n    return plane;\r\n  });\r\n\r\n  // Point Cloud Systems\r\n  var pcsArray = planes.map((plane, index) => {\r\n    var pcs = new BABYLON.PointsCloudSystem(`pcs${index + 1}`, 3, scene);\r\n    pcs.addSurfacePoints(plane, 30000, BABYLON.PointColor.Color);\r\n    return pcs;\r\n  });\r\n\r\n  Promise.all(pcsArray.map((pcs) => pcs.buildMeshAsync())).then((meshes) => {\r\n    meshes.forEach((mesh) => {\r\n      mesh.scaling = new BABYLON.Vector3(0.5, 0.5, 0.5);\r\n    });\r\n\r\n    planes.forEach((plane) => plane.dispose());\r\n\r\n    meshes.forEach((mesh) => mesh.setEnabled(false));\r\n    meshes[0].setEnabled(true);\r\n\r\n    // Ensure vertex alpha is used\r\n    meshes.forEach((mesh) => {\r\n      mesh.hasVertexAlpha = true;\r\n    });\r\n\r\n    // Image morphing sequence\r\n    var currentIndex = 0;\r\n    var morphDuration = 1000; // 1 second for morphing\r\n\r\n    function morphToNextImage(nextIndex) {\r\n      var currentMesh = meshes[currentIndex];\r\n      var nextMesh = meshes[nextIndex];\r\n      nextMesh.setEnabled(true);\r\n\r\n      var time = 0;\r\n\r\n      scene.onBeforeRenderObservable.add(function morphing() {\r\n        time += scene.getEngine().getDeltaTime();\r\n        var t = time / morphDuration;\r\n        if (t > 1) t = 1;\r\n\r\n        var positions1 = currentMesh.getVerticesData(BABYLON.VertexBuffer.PositionKind);\r\n        var positions2 = nextMesh.getVerticesData(BABYLON.VertexBuffer.PositionKind);\r\n        var colors1 = currentMesh.getVerticesData(BABYLON.VertexBuffer.ColorKind);\r\n        var colors2 = nextMesh.getVerticesData(BABYLON.VertexBuffer.ColorKind);\r\n\r\n        var positions = [];\r\n        var colors = [];\r\n\r\n        for (var i = 0; i < positions1.length; i += 3) {\r\n          positions.push(\r\n            BABYLON.Scalar.Lerp(positions1[i], positions2[i], t),\r\n            BABYLON.Scalar.Lerp(positions1[i + 1], positions2[i + 1], t),\r\n            BABYLON.Scalar.Lerp(positions1[i + 2], positions2[i + 2], t)\r\n          );\r\n        }\r\n\r\n        for (var i = 0; i < colors1.length; i += 4) {\r\n          colors.push(\r\n            BABYLON.Scalar.Lerp(colors1[i], colors2[i], t),\r\n            BABYLON.Scalar.Lerp(colors1[i + 1], colors2[i + 1], t),\r\n            BABYLON.Scalar.Lerp(colors1[i + 2], colors2[i + 2], t),\r\n            BABYLON.Scalar.Lerp(colors1[i + 3], colors2[i + 3], t)\r\n          );\r\n        }\r\n\r\n        currentMesh.updateVerticesData(BABYLON.VertexBuffer.PositionKind, positions);\r\n        currentMesh.updateVerticesData(BABYLON.VertexBuffer.ColorKind, colors);\r\n\r\n        if (t === 1) {\r\n          scene.onBeforeRenderObservable.remove(morphing);\r\n          currentMesh.setEnabled(false);\r\n          currentIndex = nextIndex;\r\n        }\r\n      });\r\n    }\r\n\r\n    function showNextImage() {\r\n      var nextIndex = (currentIndex + 1) % meshes.length;\r\n      morphToNextImage(nextIndex);\r\n    }\r\n\r\n    function showPreviousImage() {\r\n      var previousIndex = (currentIndex - 1 + meshes.length) % meshes.length;\r\n      morphToNextImage(previousIndex);\r\n    }\r\n\r\n    // Add slight movement to particles for dynamic effect\r\n    scene.onBeforeRenderObservable.add(() => {\r\n      meshes.forEach((mesh) => {\r\n        if (mesh.isEnabled()) {\r\n          var positions = mesh.getVerticesData(BABYLON.VertexBuffer.PositionKind);\r\n          for (var i = 0; i < positions.length; i += 3) {\r\n            positions[i] += (Math.random() - 0.5) * 0.01; // Small random movement on X-axis\r\n          }\r\n          mesh.updateVerticesData(BABYLON.VertexBuffer.PositionKind, positions);\r\n        }\r\n      });\r\n    });\r\n\r\n    // GUI\r\n    var advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI\");\r\n\r\n    var nextButton = BABYLON.GUI.Button.CreateSimpleButton(\"nextButton\", \"Next\");\r\n    nextButton.width = \"150px\";\r\n    nextButton.height = \"40px\";\r\n    nextButton.color = \"white\";\r\n    nextButton.background = \"green\";\r\n    nextButton.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT;\r\n    nextButton.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_BOTTOM;\r\n    nextButton.onPointerUpObservable.add(function () {\r\n      showNextImage();\r\n    });\r\n    advancedTexture.addControl(nextButton);\r\n\r\n    var prevButton = BABYLON.GUI.Button.CreateSimpleButton(\"prevButton\", \"Previous\");\r\n    prevButton.width = \"150px\";\r\n    prevButton.height = \"40px\";\r\n    prevButton.color = \"white\";\r\n    prevButton.background = \"red\";\r\n    prevButton.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    prevButton.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_BOTTOM;\r\n    prevButton.onPointerUpObservable.add(function () {\r\n      showPreviousImage();\r\n    });\r\n    advancedTexture.addControl(prevButton);\r\n  });\r\n\r\n  return scene;\r\n}\r\n"],"names":["images","createScene","engine","canvas","BABYLON","scene","Scene","useRightHandedSystem","clearColor","Color4","PointLight","Vector3","camera","ArcRotateCamera","Zero","attachControl","inertia","wheelDeltaPercentage","panningSensibility","planes","map","image","index","mat","StandardMaterial","texture","Texture","diffuseTexture","hasAlpha","useAlphaFromDiffuseTexture","plane","MeshBuilder","CreatePlane","width","height","material","setEnabled","pcsArray","pcs","PointsCloudSystem","addSurfacePoints","PointColor","Color","Promise","all","buildMeshAsync","then","meshes","forEach","mesh","scaling","dispose","hasVertexAlpha","currentIndex","morphToNextImage","nextIndex","currentMesh","nextMesh","time","onBeforeRenderObservable","add","morphing","t","getEngine","getDeltaTime","positions1","getVerticesData","VertexBuffer","PositionKind","positions2","colors1","ColorKind","colors2","positions","colors","i","length","push","Scalar","Lerp","updateVerticesData","remove","isEnabled","Math","random","advancedTexture","GUI","AdvancedDynamicTexture","CreateFullscreenUI","nextButton","Button","CreateSimpleButton","color","background","horizontalAlignment","Control","HORIZONTAL_ALIGNMENT_RIGHT","verticalAlignment","VERTICAL_ALIGNMENT_BOTTOM","onPointerUpObservable","addControl","prevButton","HORIZONTAL_ALIGNMENT_LEFT"],"sourceRoot":""}