"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[799],{8799:(e,t,o)=>{async function i(e,t,o){console.clear();const i=new o.Scene(e);i.clearColor=o.Color4.FromHexString("#1726BCFF"),i.useRightHandedSystem=!0,i.enablePhysics(new o.Vector3(0,-9.81,0),new o.AmmoJSPlugin);const s=new o.ArcRotateCamera("camera",Math.PI/2,Math.PI/2,20,new o.Vector3(0,-1.5,0),i);s.attachControl(t,!0),s.lowerRadiusLimit=20,s.upperRadiusLimit=20,s.lowerBetaLimit=Math.PI/2,s.upperBetaLimit=Math.PI/2,s.lowerAlphaLimit=Math.PI/2,s.upperAlphaLimit=Math.PI/2;new o.HemisphericLight("light",new o.Vector3(0,1,0),i).intensity=1;const r=new o.PointLight("pointLight",new o.Vector3(0,-1,5),i);r.intensity=50,r.diffuse=o.Color3.FromHexString("#5075FF");const n=o.MeshBuilder.CreateGround("ground",{width:10,height:.1},i);n.position.y=-10,n.visibility=0,n.physicsImpostor=new o.PhysicsImpostor(n,o.PhysicsImpostor.BoxImpostor,{mass:0,restitution:.9},i);const a=o.MeshBuilder.CreateGround("top",{width:10,height:.1},i);a.position.y=10,a.visibility=0,a.physicsImpostor=new o.PhysicsImpostor(a,o.PhysicsImpostor.BoxImpostor,{mass:0,restitution:.9},i);const l=(e,t,s)=>{const r=o.MeshBuilder.CreateBox(e,s,i);return r.position=t,r.visibility=0,r.isPickable=!1,r.physicsImpostor=new o.PhysicsImpostor(r,o.PhysicsImpostor.BoxImpostor,{mass:0,restitution:.9},i),r};l("leftWall",new o.Vector3(-5,0,0),{height:20,width:.1,depth:.1}),l("rightWall",new o.Vector3(5,0,0),{height:20,width:.1,depth:.1}),l("frontWall",new o.Vector3(0,0,.6),{height:20,width:10,depth:.1}),l("backWall",new o.Vector3(0,0,-.6),{height:20,width:10,depth:.1});const c=["#E5D9F2","#CDC1FF","#604CC3"],h=new o.PBRMaterial("blueMat",i);h.metallic=.9,h.roughness=.7,h.albedoColor=o.Color3.FromHexString(c[0]);const p=new o.PBRMaterial("whiteMat",i);p.metallic=.9,p.roughness=.7,p.albedoColor=o.Color3.FromHexString(c[1]);const m=new o.PBRMaterial("darkMat",i);m.metallic=.9,m.roughness=.7,m.albedoColor=o.Color3.FromHexString(c[2]);const d=[],y=[h,p,m];for(let V=0;V<50;V++){const e=o.MeshBuilder.CreateSphere(`sphere${V}`,{diameter:1},i);e.material=y[Math.floor(Math.random()*y.length)],e.position=new o.Vector3(8*(Math.random()-.5),10*Math.random(),0),e.physicsImpostor=new o.PhysicsImpostor(e,o.PhysicsImpostor.SphereImpostor,{mass:1,restitution:.9,friction:.5},i),d.push(e)}const u=new o.EdgeDetectionPostProcess("Edge PP",i,1,s);u.samples=4,u.edgeIntensity=.3,u.edgeWidth=.2,u.edgeColor=new o.Color3(0,0,0);var I=new o.DefaultRenderingPipeline("DRPP",!0,i,[s]);I.fxaaEnabled=!0,I.samples=4,I.glowLayerEnabled=!0,I.glowLayer.intensity=.75;let w=null,P=null,g=null;const C=()=>{if(!g)return null;const e=i.createPickingRay(i.pointerX,i.pointerY,o.Matrix.Identity(),s);const t=e.intersectsPlane(g);if(!t)return null;const r=e.origin.add(e.direction.scale(t));return r.z=0,r},f=e=>{e.physicsImpostor&&(w=e,(e=>{g=new o.Plane(0,0,1,0),g.normalize(),g.origin=e.position})(e),P=C(),e.material=e.material.clone("cloned_"+e.material.name),e.material.albedoColor=o.Color3.White(),e.material.emissiveColor=new o.Color3(.01,.17,.5),w.physicsImpostor.setMass(0),w.physicsImpostor.setLinearVelocity(o.Vector3.Zero()),w.physicsImpostor.setAngularVelocity(o.Vector3.Zero()),i.activeCamera.detachControl())};i.onPointerObservable.add((e=>{switch(e.type){case o.PointerEventTypes.POINTERDOWN:e.pickInfo.hit&&e.pickInfo.pickedMesh!==n&&!1===!e.pickInfo.pickedMesh.isPickable&&f(e.pickInfo.pickedMesh);break;case o.PointerEventTypes.POINTERUP:(()=>{if(w){w.physicsImpostor.setMass(1);const e=i.materials.find((e=>e.name===w.material.name.replace("cloned_","")));w.material=e,i.activeCamera.attachControl(t,!0),w=null,P=null,g=null,r.position=new o.Vector3(0,-1,5)}})();break;case o.PointerEventTypes.POINTERMOVE:M()}}));const M=()=>{if(!w||!P)return;const e=C();if(!e)return;const t=e.subtract(w.position);t.length()>.25&&t.normalize().scaleInPlace(.25),w.position.addInPlace(t),w.physicsImpostor.setLinearVelocity(o.Vector3.Zero()),w.physicsImpostor.setAngularVelocity(o.Vector3.Zero()),r.position=new o.Vector3(w.position.x,w.position.y,5)};return i.registerBeforeRender((()=>{d.forEach((e=>{((e,t)=>{if(e.physicsImpostor){const o=e.physicsImpostor.getLinearVelocity();o.length()>t&&(o.normalize().scaleInPlace(t),e.physicsImpostor.setLinearVelocity(o))}})(e,10),(e=>{const t=e.position;t.x<-5&&(t.x=-4.9),t.x>5&&(t.x=4.9),t.y<-10&&(t.y=-9.9),t.y>10&&(t.y=9.9),t.z<-.7&&(t.z=-.6),t.z>.7&&(t.z=.6)})(e)}))})),i}o.r(t),o.d(t,{createScene:()=>i})}}]);
//# sourceMappingURL=799.86885506.chunk.js.map