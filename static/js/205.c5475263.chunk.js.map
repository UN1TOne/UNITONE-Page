{"version":3,"file":"static/js/205.c5475263.chunk.js","mappings":"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","sources":["babylon/projectileParticle.js"],"sourcesContent":["export async function createScene(engine, canvas, BABYLON) {\r\n  console.clear();\r\n\r\n  var scene = new BABYLON.Scene(engine);\r\n  scene.useRightHandedSystem = true;\r\n\r\n  scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), new BABYLON.AmmoJSPlugin());\r\n\r\n  var camera = new BABYLON.ArcRotateCamera(\"camera\", BABYLON.Tools.ToRadians(90), BABYLON.Tools.ToRadians(65), 10, BABYLON.Vector3.Zero(), scene);\r\n  camera.setTarget(BABYLON.Vector3.Zero());\r\n  camera.alpha = 0.69;\r\n  camera.beta = 0.937;\r\n  camera.radius = 43;\r\n  camera.attachControl(canvas, true);\r\n  camera.inertia = 0.4;\r\n  camera.wheelDeltaPercentage = 0.3;\r\n  camera.panningSensibility = 10000;\r\n  camera.minZ = 0.1;\r\n  camera.maxZ = 100000;\r\n  scene.activeCameras.push(camera);\r\n\r\n  var light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\r\n  light.intensity = 0.7;\r\n\r\n  var groundMaterial = new BABYLON.GridMaterial(\"groundMaterial\", scene);\r\n  groundMaterial.majorUnitFrequency = 5;\r\n  groundMaterial.minorUnitVisibility = 0.5;\r\n  groundMaterial.gridRatio = 2;\r\n  groundMaterial.opacity = 0.99;\r\n  groundMaterial.useMaxLine = true;\r\n\r\n  var ground = BABYLON.MeshBuilder.CreateGround(\"ground\", { width: 100, height: 100 }, scene, false);\r\n  ground.material = groundMaterial;\r\n\r\n  const wall = BABYLON.MeshBuilder.CreateBox(\"wall\", { width: 10, height: 10, depth: 1 }, scene);\r\n  wall.position = new BABYLON.Vector3(0, 5, -20);\r\n\r\n  function createTurret(scene) {\r\n    var turret = BABYLON.MeshBuilder.CreateBox(\"turret\", { size: 0.7, height: 0.3, depth: 1 }, scene);\r\n    turret.id = \"turret\";\r\n    turret.position.x = -2;\r\n    turret.position.y = -0.2;\r\n    turret.position.z = -2;\r\n    turret.material = new BABYLON.StandardMaterial(\"turretBaseMat\", scene);\r\n    turret.material.diffuseColor = new BABYLON.Color3(1, 1, 0);\r\n    turret.lookAt(new BABYLON.Vector3(0, 0, 0));\r\n\r\n    var turretBody = BABYLON.MeshBuilder.CreateBox(\"turretBody\", { size: 0.5, height: 0.4 }, scene);\r\n    turretBody.id = \"turretBody\";\r\n    turretBody.parent = turret;\r\n    turretBody.position.y = 0.2;\r\n    turretBody.material = new BABYLON.StandardMaterial(\"turretMat\", scene);\r\n    turretBody.material.diffuseColor = new BABYLON.Color3(1, 1, 0);\r\n\r\n    var barrel = BABYLON.MeshBuilder.CreateCylinder(\"barrel\", { height: 0.8, diameter: 0.2 }, scene);\r\n    barrel.parent = turretBody;\r\n    barrel.material = new BABYLON.StandardMaterial(\"barrelMat\", scene);\r\n    barrel.material.diffuseColor = new BABYLON.Color3(0, 1, 1);\r\n    barrel.position = new BABYLON.Vector3(0, 0.25, 0.25);\r\n    barrel.rotation.x = Math.PI / 2;\r\n\r\n    turret.scaling.scaleInPlace(3);\r\n    turret.position.z = 15;\r\n    return turret;\r\n  }\r\n\r\n  const turret = createTurret(scene);\r\n\r\n  scene.onPointerObservable.add(function (pointerInfo) {\r\n    if (pointerInfo.type == BABYLON.PointerEventTypes.POINTERDOWN) {\r\n      let pickedMesh = pointerInfo.pickInfo.pickedMesh;\r\n      while (pickedMesh) {\r\n        const turretBody = turret.getChildMeshes()[0];\r\n        const barrel = turretBody.getChildMeshes()[0];\r\n\r\n        var bullet = BABYLON.MeshBuilder.CreateSphere(\"bullet\", { diameter: 1 }, scene);\r\n        bullet.material = new BABYLON.StandardMaterial(\"bulletMaterial\", scene);\r\n        bullet.position = barrel.getAbsolutePosition().add(barrel.getDirection(BABYLON.Axis.Y).scale(0.3));\r\n\r\n        bullet.physicsImpostor = new BABYLON.PhysicsImpostor(bullet, BABYLON.PhysicsImpostor.SphereImpostor, { mass: 1, restitution: 0.9 }, scene);\r\n        var force = turretBody.getDirection(BABYLON.Axis.Z).scale(15);\r\n        bullet.applyImpulse(force, bullet.getAbsolutePosition());\r\n\r\n        const particleSystem = new BABYLON.ParticleSystem(\"particles\", 2000, scene);\r\n        particleSystem.particleTexture = new BABYLON.Texture(\"/images/textures/flare.png\", scene);\r\n        particleSystem.emitter = bullet;\r\n        particleSystem.minEmitBox = new BABYLON.Vector3(-0.1, 0, -0.1);\r\n        particleSystem.maxEmitBox = new BABYLON.Vector3(0.1, 0, 0.1);\r\n        particleSystem.color1 = new BABYLON.Color4(1, 0.5, 0, 1);\r\n        particleSystem.color2 = new BABYLON.Color4(1, 0.1, 0, 1);\r\n        particleSystem.colorDead = new BABYLON.Color4(0, 0, 0, 0);\r\n        particleSystem.minSize = 0.1;\r\n        particleSystem.maxSize = 0.3;\r\n        particleSystem.minLifeTime = 0.2;\r\n        particleSystem.maxLifeTime = 0.5;\r\n        particleSystem.emitRate = 1000;\r\n        particleSystem.direction1 = new BABYLON.Vector3(-1, 1, -1);\r\n        particleSystem.direction2 = new BABYLON.Vector3(1, 1, 1);\r\n        particleSystem.gravity = new BABYLON.Vector3(0, -9.81, 0);\r\n        particleSystem.start();\r\n\r\n        setTimeout(() => {\r\n          particleSystem.stop();\r\n          bullet.dispose();\r\n        }, 1000);\r\n\r\n        break;\r\n      }\r\n    }\r\n  });\r\n\r\n  // scene.onPointerMove = function () {\r\n  //     var pickResult = scene.pick(scene.pointerX, scene.pointerY);\r\n  //     if (pickResult.hit) {\r\n  //         var diffX = pickResult.pickedPoint.x - turret.position.x;\r\n  //         var diffZ = pickResult.pickedPoint.z - turret.position.z;\r\n  //         turret.rotation.y = Math.atan2(diffX, diffZ);\r\n  //     }\r\n  // };\r\n\r\n  scene.onPointerMove = function () {\r\n    var pickResult = scene.pick(scene.pointerX, scene.pointerY);\r\n    if (pickResult.hit) {\r\n      var diffX = pickResult.pickedPoint.x - turret.position.x;\r\n      var diffZ = pickResult.pickedPoint.z - turret.position.z;\r\n\r\n      // Adjust turret base rotation to point towards the pick point\r\n      turret.rotation.y = Math.atan2(diffX, diffZ);\r\n\r\n      // Adjust barrel rotation to point vertically towards the pick point\r\n      const turretBody = turret.getChildMeshes()[0];\r\n      const barrel = turretBody.getChildMeshes()[0];\r\n\r\n      var diffY = pickResult.pickedPoint.y - barrel.getAbsolutePosition().y;\r\n      var distance = Math.sqrt(diffX * diffX + diffZ * diffZ);\r\n      barrel.rotation.x = Math.atan2(diffY, distance);\r\n    }\r\n  };\r\n  scene.onPointerMove = function () {\r\n    var pickResult = scene.pick(scene.pointerX, scene.pointerY);\r\n    if (pickResult.hit) {\r\n      var diffX = pickResult.pickedPoint.x - turret.position.x;\r\n      var diffZ = pickResult.pickedPoint.z - turret.position.z;\r\n\r\n      turret.rotation.y = Math.atan2(diffX, diffZ);\r\n\r\n      // Barrel rotation adjustment to point towards the pick point\r\n      const turretBody = turret.getChildMeshes()[0];\r\n      const barrel = turretBody.getChildMeshes()[0];\r\n\r\n      var diffY = pickResult.pickedPoint.y - (turretBody.getAbsolutePosition().y + barrel.position.y);\r\n      var distance = Math.sqrt(diffX * diffX + diffZ * diffZ);\r\n      barrel.rotation.z = -Math.atan2(diffY, distance);\r\n    }\r\n  };\r\n\r\n  return scene;\r\n}\r\n"],"names":["async","createScene","engine","canvas","BABYLON","console","clear","scene","Scene","useRightHandedSystem","enablePhysics","Vector3","AmmoJSPlugin","camera","ArcRotateCamera","Tools","ToRadians","Zero","setTarget","alpha","beta","radius","attachControl","inertia","wheelDeltaPercentage","panningSensibility","minZ","maxZ","activeCameras","push","HemisphericLight","intensity","groundMaterial","GridMaterial","majorUnitFrequency","minorUnitVisibility","gridRatio","opacity","useMaxLine","MeshBuilder","CreateGround","width","height","material","CreateBox","depth","position","turret","size","id","x","y","z","StandardMaterial","diffuseColor","Color3","lookAt","turretBody","parent","barrel","CreateCylinder","diameter","rotation","Math","PI","scaling","scaleInPlace","createTurret","onPointerObservable","add","pointerInfo","type","PointerEventTypes","POINTERDOWN","pickedMesh","pickInfo","getChildMeshes","bullet","CreateSphere","getAbsolutePosition","getDirection","Axis","Y","scale","physicsImpostor","PhysicsImpostor","SphereImpostor","mass","restitution","force","Z","applyImpulse","particleSystem","ParticleSystem","particleTexture","Texture","emitter","minEmitBox","maxEmitBox","color1","Color4","color2","colorDead","minSize","maxSize","minLifeTime","maxLifeTime","emitRate","direction1","direction2","gravity","start","setTimeout","stop","dispose","onPointerMove","pickResult","pick","pointerX","pointerY","hit","diffX","pickedPoint","diffZ","atan2","diffY","distance","sqrt"],"sourceRoot":""}