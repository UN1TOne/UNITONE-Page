{"version":3,"file":"static/js/114.d6934894.chunk.js","mappings":"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","sources":["babylon/bodyClipping.js"],"sourcesContent":["export async function createScene(engine, canvas, BABYLON) {\r\n  console.clear();\r\n  const scene = new BABYLON.Scene(engine);\r\n  scene.useRightHandedSystem = true;\r\n  scene.clearColor = BABYLON.Color4.FromHexString(\"#3C3C3CFF\");\r\n\r\n  var camera = new BABYLON.ArcRotateCamera(\"camera\", BABYLON.Tools.ToRadians(90), BABYLON.Tools.ToRadians(65), 10, BABYLON.Vector3.Zero(), scene);\r\n  camera.setTarget(new BABYLON.Vector3(0.19, 4.25, -0.35));\r\n  camera.alpha = 1.571;\r\n  camera.beta = 1.473;\r\n  camera.radius = 11.57;\r\n  camera.inertia = 0.4;\r\n  camera.wheelDeltaPercentage = 0.3;\r\n  camera.panningSensibility = 0;\r\n  camera.minZ = 0.01;\r\n  camera.maxZ = 10000;\r\n  camera.upperBetaLimit = Math.PI / 2;\r\n  camera.zoomToMouseLocation = true;\r\n  camera.attachControl(canvas, true);\r\n\r\n  var hemiLight = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\r\n  hemiLight.intensity = 0.7;\r\n\r\n  let rootMesh;\r\n  let clonedBodyMesh;\r\n  let shaderMaterial;\r\n\r\n  BABYLON.Effect.ShadersStore[\"clippingVertexShader\"] = `\r\n        precision highp float;\r\n\r\n        attribute vec3 position;\r\n        attribute vec3 normal;\r\n        attribute vec2 uv;\r\n\r\n        uniform mat4 worldViewProjection;\r\n        uniform mat4 world;\r\n        uniform vec4 u_ClipPlane; // 클리핑 평면 (x, y, z, w)\r\n\r\n        varying vec2 vUV;\r\n        varying vec3 vNormal;\r\n        varying vec3 vPosition;\r\n\r\n        void main() {\r\n            vec4 worldPosition = world * vec4(position, 1.0);\r\n            vUV = uv;\r\n            vNormal = normalize(mat3(world) * normal);\r\n            vPosition = worldPosition.xyz;\r\n\r\n            gl_Position = worldViewProjection * vec4(position, 1.0);\r\n        }\r\n    `;\r\n\r\n  BABYLON.Effect.ShadersStore[\"clippingFragmentShader\"] = `\r\n       precision highp float;\r\n\r\n        varying vec2 vUV;\r\n        varying vec3 vNormal;\r\n        varying vec3 vPosition;\r\n\r\n        uniform vec3 albedoColor;\r\n        uniform vec4 u_ClipPlane;\r\n\r\n        void main() {\r\n            if (dot(vec4(vPosition, 1.0), u_ClipPlane) < 0.0) {\r\n                discard;\r\n            }\r\n\r\n            vec3 normal = normalize(vNormal);\r\n\r\n            vec3 lightDir = normalize(vec3(0, 1.0, 0));\r\n            vec3 lightColor = vec3(1.0, 1.0, 1.0);\r\n\r\n            float lightFactor = clamp(dot(normal, lightDir) * 0.3 + 0.75, 0.6, 1.0);\r\n\r\n            vec3 finalColor = albedoColor * lightFactor * lightColor;\r\n\r\n            gl_FragColor = vec4(finalColor, 1.0);\r\n        }\r\n    `;\r\n\r\n  BABYLON.Effect.ShadersStore[\"skinFragmentShader\"] = `\r\n       precision highp float;\r\n\r\n        varying vec2 vUV;\r\n        varying vec3 vNormal;\r\n        varying vec3 vPosition;\r\n        \r\n        uniform vec3 albedoColor;\r\n        \r\n        void main() {\r\n            vec3 normal = normalize(vNormal);\r\n        \r\n            vec3 lightDir = normalize(vec3(0, 1.0, 0));\r\n            vec3 lightColor = vec3(1.0, 1.0, 1.0); \r\n        \r\n            float lightFactor = clamp(dot(normal, lightDir) * 0.3 + 0.75, 0.6, 1.0);\r\n            \r\n            vec3 finalColor = albedoColor * lightFactor * lightColor;\r\n            \r\n            gl_FragColor = vec4(finalColor, 1.0);\r\n        }\r\n    `;\r\n\r\n  BABYLON.SceneLoader.ImportMeshAsync(\"\", \"https://raw.githubusercontent.com/UN1TOne/3DAsset/master/\", \"female_anatomy.glb\").then((result) => {\r\n    rootMesh = result.meshes[0];\r\n\r\n    let clipPlane = new BABYLON.Plane(1, 0, 0, 0);\r\n\r\n    const bodyMesh = rootMesh.getChildMeshes(false, (m) => m.name === \"Object_2\")[0];\r\n    const blackMesh = rootMesh.getChildMeshes(false, (m) => m.name === \"Object_20\")[0];\r\n    const eyeMesh = rootMesh.getChildMeshes(false, (m) => m.name === \"Object_5\")[0];\r\n\r\n    if (bodyMesh) {\r\n      clonedBodyMesh = bodyMesh.clone(\"bodyMesh_cloned\");\r\n      clonedBodyMesh.scaling.x = -1;\r\n\r\n      let pbrMaterial = clonedBodyMesh.material;\r\n\r\n      if (pbrMaterial) {\r\n        shaderMaterial = new BABYLON.ShaderMaterial(\r\n          \"customPBR\",\r\n          scene,\r\n          {\r\n            vertex: \"clipping\",\r\n            fragment: \"clipping\",\r\n          },\r\n          {\r\n            attributes: [\"position\", \"normal\"],\r\n            uniforms: [\"worldViewProjection\", \"world\", \"u_ClipPlane\", \"albedoColor\"],\r\n          }\r\n        );\r\n\r\n        shaderMaterial.setColor3(\"albedoColor\", pbrMaterial.albedoColor);\r\n\r\n        shaderMaterial.setVector4(\"u_ClipPlane\", new BABYLON.Vector4(1, 0, 0, -2));\r\n\r\n        clonedBodyMesh.material = shaderMaterial;\r\n\r\n        const skinShaderMaterial = new BABYLON.ShaderMaterial(\r\n          \"customPBR\",\r\n          scene,\r\n          {\r\n            vertex: \"clipping\",\r\n            fragment: \"skin\",\r\n          },\r\n          {\r\n            attributes: [\"position\", \"normal\"],\r\n            uniforms: [\"worldViewProjection\", \"world\", \"albedoColor\"],\r\n          }\r\n        );\r\n\r\n        skinShaderMaterial.setColor3(\"albedoColor\", pbrMaterial.albedoColor);\r\n\r\n        bodyMesh.material = skinShaderMaterial;\r\n      }\r\n    }\r\n\r\n    if (blackMesh) {\r\n      // const clonedBlackMesh = blackMesh.clone(\"blackMesh_cloned\");\r\n      // clonedBlackMesh.scaling.x = -1;\r\n      blackMesh.dispose();\r\n    }\r\n    if (eyeMesh) {\r\n      const clonedEyeMesh = eyeMesh.clone(\"eyeMesh_cloned\");\r\n      clonedEyeMesh.scaling.x = -1;\r\n    }\r\n\r\n    var advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI\");\r\n\r\n    var panel = new BABYLON.GUI.StackPanel();\r\n    panel.width = \"220px\";\r\n    panel.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT;\r\n    panel.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER;\r\n    advancedTexture.addControl(panel);\r\n\r\n    var slider = new BABYLON.GUI.Slider();\r\n    slider.minimum = -0.1;\r\n    slider.maximum = 2;\r\n    slider.value = 2;\r\n    slider.paddingTop = \"10px\";\r\n    slider.height = \"30px\";\r\n    slider.width = \"200px\";\r\n    slider.color = \"green\";\r\n    slider.onValueChangedObservable.add(function (value) {\r\n      clipPlane.d = value;\r\n      shaderMaterial.setVector4(\"u_ClipPlane\", new BABYLON.Vector4(1, 0, 0, -value));\r\n    });\r\n    panel.addControl(slider);\r\n  });\r\n\r\n  return scene;\r\n}\r\n"],"names":["async","createScene","engine","canvas","BABYLON","console","clear","scene","Scene","useRightHandedSystem","clearColor","Color4","FromHexString","camera","ArcRotateCamera","Tools","ToRadians","Vector3","Zero","rootMesh","clonedBodyMesh","shaderMaterial","setTarget","alpha","beta","radius","inertia","wheelDeltaPercentage","panningSensibility","minZ","maxZ","upperBetaLimit","Math","PI","zoomToMouseLocation","attachControl","HemisphericLight","intensity","Effect","ShadersStore","SceneLoader","ImportMeshAsync","then","result","meshes","clipPlane","Plane","bodyMesh","getChildMeshes","m","name","blackMesh","eyeMesh","clone","scaling","x","pbrMaterial","material","ShaderMaterial","vertex","fragment","attributes","uniforms","setColor3","albedoColor","setVector4","Vector4","skinShaderMaterial","dispose","advancedTexture","GUI","AdvancedDynamicTexture","CreateFullscreenUI","panel","StackPanel","width","horizontalAlignment","Control","HORIZONTAL_ALIGNMENT_RIGHT","verticalAlignment","VERTICAL_ALIGNMENT_CENTER","addControl","slider","Slider","minimum","maximum","value","paddingTop","height","color","onValueChangedObservable","add","d"],"sourceRoot":""}