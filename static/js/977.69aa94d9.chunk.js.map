{"version":3,"file":"static/js/977.69aa94d9.chunk.js","mappings":"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","sources":["babylon/edge.js"],"sourcesContent":["export function createScene(engine, canvas, BABYLON) {\r\n  console.clear();\r\n  const scene = new BABYLON.Scene(engine);\r\n\r\n  scene.clearColor = BABYLON.Color4.FromHexString(\"#E4DDBBFF\");\r\n  scene.useRightHandedSystem = true;\r\n\r\n  var camera = new BABYLON.ArcRotateCamera(\"camera\", BABYLON.Tools.ToRadians(90), BABYLON.Tools.ToRadians(65), 10, BABYLON.Vector3.Zero(), scene);\r\n  camera.setTarget(new BABYLON.Vector3(-0.02, 0.16, 0.02));\r\n  camera.alpha = 1.512;\r\n  camera.beta = 1.544;\r\n  camera.radius = 0.566;\r\n  camera.inertia = 0.4;\r\n  camera.wheelDeltaPercentage = 0.3;\r\n  camera.panningSensibility = 10000;\r\n  camera.minZ = 0.1;\r\n  camera.maxZ = 100;\r\n  camera.zoomToMouseLocation = true;\r\n  camera.layerMask = 0x10000000;\r\n  camera.attachControl(canvas, true);\r\n\r\n  var camera2 = new BABYLON.ArcRotateCamera(\"Camera2\", 0, 0.8, 100, BABYLON.Vector3.Zero(), scene);\r\n  camera2.layerMask = 0x20000000;\r\n\r\n  scene.activeCameras = [camera, camera2];\r\n\r\n  // edge detection post process\r\n  const edgeDetectionPP = new BABYLON.EdgeDetectionPostProcess(\"Edge PP\", scene, 1, camera);\r\n  edgeDetectionPP.samples = 4;\r\n  // Defines the intensity of the detected edges. Higher values result in more pronounced edges.\r\n  edgeDetectionPP.edgeIntensity = 0.3;\r\n  // Defines the width of the detected edges. Higher values result in thicker edges.\r\n  edgeDetectionPP.edgeWidth = 0.2;\r\n  // Defines the color of the detected edges\r\n  edgeDetectionPP.edgeColor = new BABYLON.Color3(0, 0, 0);\r\n\r\n  // This can help anti-aliasing but it can cause performance issues\r\n  engine.setHardwareScalingLevel(0.5);\r\n\r\n  var light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\r\n  light.intensity = 1.0;\r\n  // for cel\r\n  var pointLight = new BABYLON.PointLight(\"pointLight\", new BABYLON.Vector3(1, 1, 1), scene);\r\n\r\n  // input tag for uplaoding glb file\r\n  var fileInput = document.createElement(\"input\");\r\n  fileInput.type = \"file\";\r\n  fileInput.accept = \".glb\";\r\n  fileInput.style.display = \"none\";\r\n  document.body.appendChild(fileInput);\r\n\r\n  let isCel = false;\r\n\r\n  // upload local glb file with gui button\r\n  var advancedTexture_upload = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UploadButtonUI\");\r\n  advancedTexture_upload.layer.layerMask = 0x20000000;\r\n\r\n  var button = BABYLON.GUI.Button.CreateSimpleButton(\"uploadBtn\", \"Upload GLB File\");\r\n  button.width = \"150px\";\r\n  button.height = \"40px\";\r\n  button.color = \"white\";\r\n  button.background = \"green\";\r\n  button.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT;\r\n  button.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_BOTTOM;\r\n  button.onPointerClickObservable.add(() => {\r\n    // fileInput.click();\r\n\r\n    BABYLON.SceneLoader.ImportMeshAsync(\"\", \"https://raw.githubusercontent.com/UN1TOne/3DAsset/master/\", \"michael_oc_by__kanbaki.glb\").then(\r\n      (result) => {\r\n        rootMesh = result.meshes[0];\r\n        rootMesh.normalizeToUnitCube();\r\n\r\n        const pipeline = scene.postProcessRenderPipelineManager.supportedPipelines;\r\n        if (pipeline.length === 0) {\r\n          var defaultPipeline = new BABYLON.DefaultRenderingPipeline(\"DRPP\", true, scene, [camera]);\r\n          defaultPipeline.fxaaEnabled = true;\r\n          defaultPipeline.samples = 4;\r\n        }\r\n\r\n        for (const material of scene.materials) {\r\n          material.unlit = true;\r\n        }\r\n\r\n        rootMesh.getChildMeshes().forEach((mesh) => {\r\n          mesh.layerMask = 0x10000000;\r\n\r\n          if (mesh.material) {\r\n            originalMaterials.push({ mesh: mesh, material: mesh.material });\r\n          }\r\n        });\r\n\r\n        createEdgeDetectionControlGUI();\r\n      }\r\n    );\r\n  });\r\n  advancedTexture_upload.addControl(button);\r\n\r\n  // Edge detection setting control\r\n  var advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI\");\r\n\r\n  let assetsManager = new BABYLON.AssetsManager(scene);\r\n  advancedTexture.layer.layerMask = 0x20000000;\r\n\r\n  let rootMesh;\r\n  let originalMaterials = [];\r\n\r\n  assetsManager.onTaskSuccessObservable.add(function (task) {\r\n    rootMesh = task.loadedMeshes[0];\r\n\r\n    const pipeline = scene.postProcessRenderPipelineManager.supportedPipelines;\r\n    if (pipeline.length === 0) {\r\n      var defaultPipeline = new BABYLON.DefaultRenderingPipeline(\"DRPP\", true, scene, [camera]);\r\n      defaultPipeline.fxaaEnabled = true;\r\n      defaultPipeline.samples = 4;\r\n    }\r\n\r\n    for (const material of scene.materials) {\r\n      material.unlit = true;\r\n    }\r\n\r\n    rootMesh.getChildMeshes().forEach((mesh) => {\r\n      mesh.layerMask = 0x10000000;\r\n\r\n      if (mesh.material) {\r\n        originalMaterials.push({ mesh: mesh, material: mesh.material });\r\n      }\r\n    });\r\n\r\n    createEdgeDetectionControlGUI();\r\n  });\r\n\r\n  assetsManager.onTaskErrorObservable.add(function (task) {\r\n    console.log(\"task failed\", task.errorObject.message, task.errorObject.exception);\r\n  });\r\n\r\n  function createEdgeDetectionControlGUI() {\r\n    // for width, intensity, color\r\n    var panel = new BABYLON.GUI.StackPanel();\r\n    panel.width = \"200px\";\r\n    panel.top = \"-40px\";\r\n    panel.isVertical = true;\r\n    panel.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    panel.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER;\r\n    panel.left = \"20px\";\r\n    advancedTexture.addControl(panel);\r\n\r\n    var widthTextBlock = new BABYLON.GUI.TextBlock(\"width\");\r\n    widthTextBlock.text = \"Width: \" + parseFloat(edgeDetectionPP.edgeWidth.toFixed(2));\r\n    widthTextBlock.textHorizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    widthTextBlock.color = \"Black\";\r\n    widthTextBlock.fontSize = 18;\r\n    widthTextBlock.height = \"30px\";\r\n    widthTextBlock.width = \"200px\";\r\n    widthTextBlock.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    widthTextBlock.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER;\r\n    panel.addControl(widthTextBlock);\r\n\r\n    var widthSlider = new BABYLON.GUI.Slider(\"width\");\r\n    widthSlider.name = \"width\";\r\n    widthSlider.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    widthSlider.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER;\r\n    widthSlider.height = \"20px\";\r\n    widthSlider.width = \"200px\";\r\n    widthSlider.minimum = 0.13;\r\n    widthSlider.maximum = 0.65;\r\n    widthSlider.value = edgeDetectionPP.edgeWidth;\r\n    widthSlider.step = 0.01;\r\n    widthSlider.isVertical = false;\r\n    widthSlider.color = \"green\";\r\n    widthSlider.background = \"grey\";\r\n    panel.addControl(widthSlider);\r\n\r\n    widthSlider &&\r\n      widthSlider.onValueChangedObservable.add(function (value) {\r\n        edgeDetectionPP.edgeWidth = value;\r\n        widthTextBlock.text = \"Width: \" + parseFloat(value.toFixed(2));\r\n      });\r\n\r\n    var intensityTextBlock = new BABYLON.GUI.TextBlock(\"Intensity\");\r\n    intensityTextBlock.text = \"Intensity: \" + parseFloat(edgeDetectionPP.edgeIntensity.toFixed(2));\r\n    intensityTextBlock.textHorizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    intensityTextBlock.color = \"Black\";\r\n    intensityTextBlock.fontSize = 18;\r\n    intensityTextBlock.height = \"30px\";\r\n    intensityTextBlock.width = \"200px\";\r\n    intensityTextBlock.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    intensityTextBlock.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER;\r\n    panel.addControl(intensityTextBlock);\r\n\r\n    var intensitySlider = new BABYLON.GUI.Slider(\"Intensity\");\r\n    intensitySlider.name = \"Intensity\";\r\n    intensitySlider.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    intensitySlider.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER;\r\n    intensitySlider.height = \"20px\";\r\n    intensitySlider.width = \"200px\";\r\n    intensitySlider.minimum = 0.01;\r\n    intensitySlider.maximum = 1;\r\n    intensitySlider.value = edgeDetectionPP.edgeIntensity;\r\n    intensitySlider.step = 0.01;\r\n    intensitySlider.isVertical = false;\r\n    intensitySlider.color = \"green\";\r\n    intensitySlider.background = \"grey\";\r\n    panel.addControl(intensitySlider);\r\n\r\n    intensitySlider &&\r\n      intensitySlider.onValueChangedObservable.add(function (value) {\r\n        edgeDetectionPP.edgeIntensity = value;\r\n        intensityTextBlock.text = \"Intensity: \" + parseFloat(value.toFixed(2));\r\n      });\r\n\r\n    // for renderMode\r\n    var panel2 = new BABYLON.GUI.StackPanel();\r\n    panel2.width = \"200px\";\r\n    panel2.top = \"150px\";\r\n    panel2.isVertical = true;\r\n    panel2.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    panel2.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER;\r\n    panel2.left = \"20px\";\r\n    advancedTexture.addControl(panel2);\r\n\r\n    var general = BABYLON.GUI.Button.CreateSimpleButton(\"general btn\", \"General\");\r\n    general.width = \"150px\";\r\n    general.height = \"40px\";\r\n    general.color = \"white\";\r\n    general.background = \"green\";\r\n    general.left = \"-35px\";\r\n    general.onPointerUpObservable.add(function () {\r\n      edgeDetectionPP.renderMode = 0;\r\n    });\r\n    panel2.addControl(general);\r\n\r\n    var normal = BABYLON.GUI.Button.CreateSimpleButton(\"normal btn\", \"Normal\");\r\n    normal.width = \"150px\";\r\n    normal.height = \"40px\";\r\n    normal.color = \"white\";\r\n    normal.background = \"green\";\r\n    normal.left = \"-35px\";\r\n    normal.onPointerUpObservable.add(function () {\r\n      edgeDetectionPP.renderMode = 1;\r\n    });\r\n    panel2.addControl(normal);\r\n\r\n    var depth = BABYLON.GUI.Button.CreateSimpleButton(\"depth btn\", \"Depth\");\r\n    depth.width = \"150px\";\r\n    depth.height = \"40px\";\r\n    depth.color = \"white\";\r\n    depth.background = \"green\";\r\n    depth.left = \"-35px\";\r\n    depth.onPointerUpObservable.add(function () {\r\n      edgeDetectionPP.renderMode = 2;\r\n    });\r\n    panel2.addControl(depth);\r\n\r\n    var outlineOnly = BABYLON.GUI.Button.CreateSimpleButton(\"outlineOnly btn\", \"OutlineOnly\");\r\n    outlineOnly.width = \"150px\";\r\n    outlineOnly.height = \"40px\";\r\n    outlineOnly.color = \"white\";\r\n    outlineOnly.background = \"green\";\r\n    outlineOnly.left = \"-35px\";\r\n    outlineOnly.onPointerUpObservable.add(function () {\r\n      edgeDetectionPP.renderMode = 3;\r\n    });\r\n    panel2.addControl(outlineOnly);\r\n\r\n    var colorPicker = new BABYLON.GUI.ColorPicker();\r\n    colorPicker.value = edgeDetectionPP.edgeColor;\r\n    colorPicker.height = \"150px\";\r\n    colorPicker.width = \"150px\";\r\n    colorPicker.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    colorPicker.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_TOP;\r\n    colorPicker.top = \"20px\";\r\n    colorPicker.left = \"20px\";\r\n\r\n    colorPicker.onValueChangedObservable.add(function (value) {\r\n      edgeDetectionPP.edgeColor = value;\r\n    });\r\n\r\n    advancedTexture.addControl(colorPicker);\r\n\r\n    var panel_cel = new BABYLON.GUI.StackPanel(\"Cel\");\r\n    panel_cel.width = \"200px\";\r\n    panel_cel.height = \"400px\";\r\n    // panel_cel.left = \"80px\";\r\n    panel_cel.isVertical = false;\r\n    panel_cel.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT;\r\n    panel_cel.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER;\r\n    advancedTexture.addControl(panel_cel);\r\n\r\n    var checkbox = new BABYLON.GUI.Checkbox();\r\n    checkbox.width = \"20px\";\r\n    checkbox.height = \"20px\";\r\n    checkbox.isChecked = isCel;\r\n    checkbox.color = \"green\";\r\n    checkbox.onIsCheckedChangedObservable.add(function (value) {\r\n      if (value) {\r\n        if (rootMesh) {\r\n          createPointLightPanel(); // create pointLight GUI\r\n\r\n          rootMesh.getChildMeshes().forEach((mesh) => {\r\n            if (mesh.material) {\r\n              const cell = new BABYLON.CellMaterial(\"cel_\" + mesh.material.name, scene);\r\n              if (mesh.material.albedoTexture) {\r\n                cell.diffuseTexture = mesh.material.albedoTexture;\r\n              }\r\n              cell.diffuseColor = mesh.material.albedoColor;\r\n              cell.computeHighLevel = true;\r\n\r\n              mesh.material = cell;\r\n            }\r\n          });\r\n        }\r\n      } else {\r\n        if (rootMesh) {\r\n          var stackPanel = advancedTexture.getControlByName(\"PointLight\");\r\n\r\n          if (stackPanel) {\r\n            advancedTexture.removeControl(stackPanel);\r\n          }\r\n\r\n          rootMesh.getChildMeshes().forEach((mesh) => {\r\n            if (mesh.material) {\r\n              const matchingMesh = originalMaterials.find((entry) => entry.mesh === mesh);\r\n              if (matchingMesh) {\r\n                mesh.material = matchingMesh.material;\r\n              }\r\n            }\r\n          });\r\n        }\r\n      }\r\n\r\n      header.text = \" Cel: \" + value;\r\n    });\r\n\r\n    panel_cel.addControl(checkbox);\r\n\r\n    var header = new BABYLON.GUI.TextBlock();\r\n    header.text = \" Cel: \" + isCel;\r\n    header.width = \"180px\";\r\n    header.marginLeft = \"5px\";\r\n    header.textHorizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    header.color = \"black\";\r\n    panel_cel.addControl(header);\r\n  }\r\n\r\n  function createPointLightPanel() {\r\n    var panel_pointLight = new BABYLON.GUI.StackPanel(\"PointLight\");\r\n    panel_pointLight.width = \"200px\";\r\n    panel_pointLight.height = \"400px\";\r\n    panel_pointLight.left = \"-20px\";\r\n    panel_pointLight.top = \"220px\";\r\n    panel_pointLight.isVertical = true;\r\n    panel_pointLight.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT;\r\n    panel_pointLight.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER;\r\n    advancedTexture.addControl(panel_pointLight);\r\n\r\n    var xTextBlock = new BABYLON.GUI.TextBlock(\"PointLight X Text\");\r\n    xTextBlock.text = \"PointLight X\";\r\n    xTextBlock.textHorizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    xTextBlock.color = \"Black\";\r\n    xTextBlock.fontSize = 18;\r\n    xTextBlock.height = \"30px\";\r\n    xTextBlock.width = \"200px\";\r\n    xTextBlock.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    xTextBlock.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER;\r\n    panel_pointLight.addControl(xTextBlock);\r\n\r\n    var xSlider = new BABYLON.GUI.Slider(\"PointLight X Slider\");\r\n    xSlider.name = \"x\";\r\n    xSlider.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    xSlider.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER;\r\n    xSlider.height = \"20px\";\r\n    xSlider.width = \"200px\";\r\n    xSlider.minimum = -5;\r\n    xSlider.maximum = 5;\r\n    xSlider.value = pointLight.position.x;\r\n    xSlider.step = 0.01;\r\n    xSlider.isVertical = false;\r\n    xSlider.color = \"green\";\r\n    xSlider.background = \"grey\";\r\n    panel_pointLight.addControl(xSlider);\r\n\r\n    xSlider.onValueChangedObservable.add(function (value) {\r\n      pointLight.position.x = value;\r\n    });\r\n\r\n    var yTextBlock = new BABYLON.GUI.TextBlock(\"PointLight Y Text\");\r\n    yTextBlock.text = \"PointLight Y\";\r\n    yTextBlock.textHorizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    yTextBlock.color = \"Black\";\r\n    yTextBlock.fontSize = 18;\r\n    yTextBlock.height = \"30px\";\r\n    yTextBlock.width = \"200px\";\r\n    yTextBlock.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    yTextBlock.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER;\r\n    panel_pointLight.addControl(yTextBlock);\r\n\r\n    var ySlider = new BABYLON.GUI.Slider(\"PointLight Y Slider\");\r\n    ySlider.name = \"y\";\r\n    ySlider.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    ySlider.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER;\r\n    ySlider.height = \"20px\";\r\n    ySlider.width = \"200px\";\r\n    ySlider.minimum = -5;\r\n    ySlider.maximum = 5;\r\n    ySlider.value = pointLight.position.y;\r\n    ySlider.step = 0.01;\r\n    ySlider.isVertical = false;\r\n    ySlider.color = \"green\";\r\n    ySlider.background = \"grey\";\r\n    panel_pointLight.addControl(ySlider);\r\n\r\n    ySlider.onValueChangedObservable.add(function (value) {\r\n      pointLight.position.y = value;\r\n    });\r\n\r\n    var zTextBlock = new BABYLON.GUI.TextBlock(\"PointLight Z Text\");\r\n    zTextBlock.text = \"PointLight Z\";\r\n    zTextBlock.textHorizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    zTextBlock.color = \"Black\";\r\n    zTextBlock.fontSize = 18;\r\n    zTextBlock.height = \"30px\";\r\n    zTextBlock.width = \"200px\";\r\n    zTextBlock.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    zTextBlock.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER;\r\n    panel_pointLight.addControl(zTextBlock);\r\n\r\n    var zSlider = new BABYLON.GUI.Slider(\"PointLight Z Slider\");\r\n    zSlider.name = \"z\";\r\n    zSlider.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    zSlider.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER;\r\n    zSlider.height = \"20px\";\r\n    zSlider.width = \"200px\";\r\n    zSlider.minimum = -5;\r\n    zSlider.maximum = 5;\r\n    zSlider.value = pointLight.position.z;\r\n    zSlider.step = 0.01;\r\n    zSlider.isVertical = false;\r\n    zSlider.color = \"green\";\r\n    zSlider.background = \"grey\";\r\n    panel_pointLight.addControl(zSlider);\r\n\r\n    zSlider.onValueChangedObservable.add(function (value) {\r\n      pointLight.position.z = value;\r\n    });\r\n  }\r\n\r\n  fileInput.onchange = function (evt) {\r\n    var files = evt.target.files;\r\n    var filename = files[0].name;\r\n    var blob = new Blob([files[0]]);\r\n\r\n    BABYLON.FilesInput.FilesToLoad[filename.toLowerCase()] = blob;\r\n    assetsManager.addMeshTask(\"task\", \"\", \"file:\", filename);\r\n\r\n    assetsManager.onFinish = function (tasks) {\r\n      fileInput.value = \"\";\r\n    };\r\n\r\n    assetsManager.load();\r\n  };\r\n\r\n  return scene;\r\n}\r\n"],"names":["createScene","engine","canvas","BABYLON","console","clear","scene","Scene","clearColor","Color4","FromHexString","useRightHandedSystem","camera","ArcRotateCamera","Tools","ToRadians","Vector3","Zero","setTarget","alpha","beta","radius","inertia","wheelDeltaPercentage","panningSensibility","minZ","maxZ","zoomToMouseLocation","layerMask","attachControl","camera2","activeCameras","edgeDetectionPP","EdgeDetectionPostProcess","samples","edgeIntensity","edgeWidth","edgeColor","Color3","setHardwareScalingLevel","HemisphericLight","intensity","pointLight","PointLight","fileInput","document","createElement","type","accept","style","display","body","appendChild","isCel","advancedTexture_upload","GUI","AdvancedDynamicTexture","CreateFullscreenUI","layer","button","Button","CreateSimpleButton","width","height","color","background","horizontalAlignment","Control","HORIZONTAL_ALIGNMENT_RIGHT","verticalAlignment","VERTICAL_ALIGNMENT_BOTTOM","onPointerClickObservable","add","SceneLoader","ImportMeshAsync","then","result","rootMesh","meshes","normalizeToUnitCube","postProcessRenderPipelineManager","supportedPipelines","length","defaultPipeline","DefaultRenderingPipeline","fxaaEnabled","material","materials","unlit","getChildMeshes","forEach","mesh","originalMaterials","push","createEdgeDetectionControlGUI","addControl","advancedTexture","assetsManager","AssetsManager","panel","StackPanel","top","isVertical","HORIZONTAL_ALIGNMENT_LEFT","VERTICAL_ALIGNMENT_CENTER","left","widthTextBlock","TextBlock","text","parseFloat","toFixed","textHorizontalAlignment","fontSize","widthSlider","Slider","name","minimum","maximum","value","step","onValueChangedObservable","intensityTextBlock","intensitySlider","panel2","general","onPointerUpObservable","renderMode","normal","depth","outlineOnly","colorPicker","ColorPicker","VERTICAL_ALIGNMENT_TOP","panel_cel","checkbox","Checkbox","isChecked","onIsCheckedChangedObservable","panel_pointLight","xTextBlock","xSlider","position","x","yTextBlock","ySlider","y","zTextBlock","zSlider","z","createPointLightPanel","cell","CellMaterial","albedoTexture","diffuseTexture","diffuseColor","albedoColor","computeHighLevel","stackPanel","getControlByName","removeControl","matchingMesh","find","entry","header","marginLeft","onTaskSuccessObservable","task","loadedMeshes","onTaskErrorObservable","log","errorObject","message","exception","onchange","evt","files","target","filename","blob","Blob","FilesInput","FilesToLoad","toLowerCase","addMeshTask","onFinish","tasks","load"],"sourceRoot":""}