{"version":3,"file":"static/js/752.efa5cadf.chunk.js","mappings":"sGAAO,SAASA,EAAYC,EAAQC,EAAQC,GAE1C,IAAIC,EAAQ,IAAID,EAAQE,MAAMJ,GAC9BG,EAAME,WAAaH,EAAQI,OAAOC,cAAc,aAGhD,IAAIC,EAAS,IAAIN,EAAQO,WAAW,UAAW,IAAIP,EAAQQ,QAAQ,EAAG,GAAI,GAAIP,GAE9EK,EAAOG,UAAUT,EAAQQ,QAAQE,QAGjCJ,EAAOK,cAAcZ,GAAQ,GAGjB,IAAIC,EAAQY,iBAAiB,QAAS,IAAIZ,EAAQQ,QAAQ,EAAG,EAAG,GAAIP,GAC1EY,UAAY,GAElB,IAAIC,EAASd,EAAQe,YAAYC,aAAa,SAAU,CAAEC,MAAO,EAAGC,OAAQ,GAAKjB,GAE7EkB,EAAS,GA0Cb,OAvCAlB,EAAMmB,cAAgB,SAAUC,EAAKC,GAEnC,GAAIA,EAAWC,KAAOD,EAAWE,aAAeV,EAAQ,CACtD,IAAIW,EAAcH,EAAWG,YAO7B,GANAN,EAAOO,KAAK,IAAI1B,EAAQQ,QAAQiB,EAAYE,EAAGF,EAAYG,EAAGH,EAAYI,IAG1E7B,EAAQe,YAAYe,aAAa,QAAS,CAAEC,SAAU,IAAO9B,GAAO+B,SAAWP,EAG3EN,EAAOc,QAAU,EAAG,CAEtB,IAAIC,EAAkBjC,EAAMkC,cAAc,WACtCD,GACFA,EAAgBE,UAIlB,IAAIC,EASV,SAAoBlB,GAElB,IAAImB,EAASnB,EAAOoB,QAAO,CAACC,EAAKC,IAAUD,EAAIE,IAAID,IAAQ,IAAIzC,EAAQQ,QAAQ,EAAG,EAAG,IAAImC,MAAM,EAAIxB,EAAOc,QAG1G,OAAOd,EAAOyB,MAAK,CAACC,EAAGC,IACRC,KAAKC,MAAMH,EAAEhB,EAAIS,EAAOT,EAAGgB,EAAElB,EAAIW,EAAOX,GACxCoB,KAAKC,MAAMF,EAAEjB,EAAIS,EAAOT,EAAGiB,EAAEnB,EAAIW,EAAOX,IAGzD,CAnByBsB,CAAW9B,GAGhBnB,EAAQe,YAAYmC,YAAY,UAAW,CAAE/B,OAAQkB,EAAac,OAAOd,EAAa,IAAKe,WAAW,GAAQnD,EAC9H,CACF,CACF,EAeOA,CACT,C","sources":["babylon/point2Polygon.js"],"sourcesContent":["export function createScene(engine, canvas, BABYLON) {\r\n  // This creates a basic Babylon Scene object (non-mesh)\r\n  var scene = new BABYLON.Scene(engine);\r\n  scene.clearColor = BABYLON.Color4.FromHexString(\"#E4DDBBFF\");\r\n\r\n  // This creates and positions a free camera (non-mesh)\r\n  var camera = new BABYLON.FreeCamera(\"camera1\", new BABYLON.Vector3(0, 5, -7), scene);\r\n  // This targets the camera to scene origin\r\n  camera.setTarget(BABYLON.Vector3.Zero());\r\n\r\n  // This attaches the camera to the canvas\r\n  camera.attachControl(canvas, true);\r\n\r\n  // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\r\n  var light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\r\n  light.intensity = 0.7;\r\n\r\n  var ground = BABYLON.MeshBuilder.CreateGround(\"ground\", { width: 6, height: 6 }, scene);\r\n\r\n  var points = [];\r\n\r\n  // On pointer down event\r\n  scene.onPointerDown = function (evt, pickResult) {\r\n    // If the ground was clicked, add the point\r\n    if (pickResult.hit && pickResult.pickedMesh === ground) {\r\n      var pickedPoint = pickResult.pickedPoint;\r\n      points.push(new BABYLON.Vector3(pickedPoint.x, pickedPoint.y, pickedPoint.z));\r\n\r\n      // Create a sphere to represent the point\r\n      BABYLON.MeshBuilder.CreateSphere(\"point\", { diameter: 0.1 }, scene).position = pickedPoint;\r\n\r\n      // If we have at least 3 points, create a polygon\r\n      if (points.length >= 3) {\r\n        // Remove any existing polygon\r\n        var existingPolygon = scene.getMeshByName(\"polygon\");\r\n        if (existingPolygon) {\r\n          existingPolygon.dispose();\r\n        }\r\n\r\n        // Find the shortest path to form a polygon\r\n        var sortedPoints = sortPoints(points);\r\n\r\n        // Create the polygon mesh\r\n        var polygon = BABYLON.MeshBuilder.CreateLines(\"polygon\", { points: sortedPoints.concat(sortedPoints[0]), updatable: true }, scene);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Function to sort points in a clockwise order\r\n  function sortPoints(points) {\r\n    // Find the centroid of the points\r\n    var center = points.reduce((acc, point) => acc.add(point), new BABYLON.Vector3(0, 0, 0)).scale(1 / points.length);\r\n\r\n    // Sort points by angle from the centroid\r\n    return points.sort((a, b) => {\r\n      var angleA = Math.atan2(a.z - center.z, a.x - center.x);\r\n      var angleB = Math.atan2(b.z - center.z, b.x - center.x);\r\n      return angleA - angleB;\r\n    });\r\n  }\r\n\r\n  return scene;\r\n}\r\n"],"names":["createScene","engine","canvas","BABYLON","scene","Scene","clearColor","Color4","FromHexString","camera","FreeCamera","Vector3","setTarget","Zero","attachControl","HemisphericLight","intensity","ground","MeshBuilder","CreateGround","width","height","points","onPointerDown","evt","pickResult","hit","pickedMesh","pickedPoint","push","x","y","z","CreateSphere","diameter","position","length","existingPolygon","getMeshByName","dispose","sortedPoints","center","reduce","acc","point","add","scale","sort","a","b","Math","atan2","sortPoints","CreateLines","concat","updatable"],"sourceRoot":""}