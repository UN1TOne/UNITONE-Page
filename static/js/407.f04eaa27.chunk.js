"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[407],{77407:(n,e,o)=>{function t(n,e,o){o.Effect.ShadersStore.basicVertexShader="\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\n\nuniform mat4 worldViewProjection;\nuniform float time;\n\nvarying vec3 vPosition;\nvarying vec2 vUV;\n\nvoid main() {\n    vec4 p = vec4(position, 1.0);\n    vPosition = p.xyz;\n    vUV = uv;\n    gl_Position = worldViewProjection * p;\n}\n",o.Effect.ShadersStore.basicFragmentShader="\nprecision highp float;\nuniform float iTime;\nuniform vec2 iResolution;\n\nvarying vec3 vPosition;\nvarying vec2 vUV;\n\n// --------- START-SHADER-TOY-CODE-HERE ------------\n\nconst float cloudscale = 1.1;\nconst float speed = 0.03;\nconst float clouddark = 0.5;\nconst float cloudlight = 0.3;\nconst float cloudcover = 0.2;\nconst float cloudalpha = 8.0;\nconst float skytint = 0.5;\nconst vec3 skycolour1 = vec3(0.2, 0.4, 0.6);\nconst vec3 skycolour2 = vec3(0.4, 0.7, 1.0);\n\nconst mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n\nvec2 hash( vec2 p ) {\n    p = vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3)));\n    return -1.0 + 2.0 * fract(sin(p) * 43758.5453123);\n}\n\nfloat noise( in vec2 p ) {\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n    vec2 i = floor(p + (p.x + p.y) * K1);\n    vec2 a = p - i + (i.x + i.y) * K2;\n    vec2 o = (a.x > a.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec2 b = a - o + K2;\n    vec2 c = a - 1.0 + 2.0 * K2;\n    vec3 h = max(0.5 - vec3(dot(a, a), dot(b, b), dot(c, c)), 0.0);\n    vec3 n = h * h * h * h * vec3(dot(a, hash(i + 0.0)), dot(b, hash(i + o)), dot(c, hash(i + 1.0)));\n    return dot(n, vec3(70.0));\n}\n\nfloat fbm(vec2 n) {\n    float total = 0.0, amplitude = 0.1;\n    for (int i = 0; i < 7; i++) {\n        total += noise(n) * amplitude;\n        n = m * n;\n        amplitude *= 0.4;\n    }\n    return total;\n}\n\n// -----------------------------------------------\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 p = fragCoord.xy / iResolution.xy;\n    vec2 uv = p * vec2(iResolution.x / iResolution.y, 1.0);\n    float time = iTime * speed;\n    float q = fbm(uv * cloudscale * 0.5);\n\n    float r = 0.0;\n    uv *= cloudscale;\n    uv -= q - time;\n    float weight = 0.8;\n    for (int i = 0; i < 8; i++) {\n        r += abs(weight * noise(uv));\n        uv = m * uv + time;\n        weight *= 0.7;\n    }\n\n    float f = 0.0;\n    uv = p * vec2(iResolution.x / iResolution.y, 1.0);\n    uv *= cloudscale;\n    uv -= q - time;\n    weight = 0.7;\n    for (int i = 0; i < 8; i++) {\n        f += weight * noise(uv);\n        uv = m * uv + time;\n        weight *= 0.6;\n    }\n\n    f *= r + f;\n\n    float c = 0.0;\n    time = iTime * speed * 2.0;\n    uv = p * vec2(iResolution.x / iResolution.y, 1.0);\n    uv *= cloudscale * 2.0;\n    uv -= q - time;\n    weight = 0.4;\n    for (int i = 0; i < 7; i++) {\n        c += weight * noise(uv);\n        uv = m * uv + time;\n        weight *= 0.6;\n    }\n\n    float c1 = 0.0;\n    time = iTime * speed * 3.0;\n    uv = p * vec2(iResolution.x / iResolution.y, 1.0);\n    uv *= cloudscale * 3.0;\n    uv -= q - time;\n    weight = 0.4;\n    for (int i = 0; i < 7; i++) {\n        c1 += abs(weight * noise(uv));\n        uv = m * uv + time;\n        weight *= 0.6;\n    }\n\n    c += c1;\n\n    vec3 skycolour = mix(skycolour2, skycolour1, p.y);\n    vec3 cloudcolour = vec3(1.1, 1.1, 0.9) * clamp((clouddark + cloudlight * c), 0.0, 1.0);\n\n    f = cloudcover + cloudalpha * f * r;\n\n    vec3 result = mix(skycolour, clamp(skytint * skycolour + cloudcolour, 0.0, 1.0), clamp(f + c, 0.0, 1.0));\n\n    fragColor = vec4(result, 1.0);\n}\n\n// --------- END-SHADER-TOY-CODE-HERE ------------\n\nvoid main() {\n    mainImage(gl_FragColor, vUV * iResolution.xy);\n}\n";var t=new o.Scene(n),i=new o.ArcRotateCamera("camera",o.Tools.ToRadians(90),o.Tools.ToRadians(65),10,new o.Vector3(0,-10,0),t);i.setTarget(o.Vector3.Zero()),i.attachControl();new o.HemisphericLight("light1",new o.Vector3(0,1,0),t);var c=new o.ShaderMaterial("shader",t,{vertex:"basic",fragment:"basic"},{attributes:["position","normal","uv"],uniforms:["world","worldView","worldViewProjection","view","iTime","iResolution"]});c.setVector2("iResolution",new o.Vector2(e.width,e.height));var a=o.MeshBuilder.CreateSphere("sphere",{diameter:1e4,slice:.5},t);a.material=c,a.material.backFaceCulling=!1;var r=0;return t.registerBeforeRender((()=>{r+=1e-4*n.getDeltaTime(),c.setFloat("iTime",r),c.setVector2("iResolution",new o.Vector2(e.width,e.height))})),t}o.r(e),o.d(e,{createScene:()=>t})}}]);
//# sourceMappingURL=407.f04eaa27.chunk.js.map