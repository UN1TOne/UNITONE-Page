{"version":3,"file":"static/js/403.c7080a54.chunk.js","mappings":"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","sources":["babylon/rotationLimit.js"],"sourcesContent":["export async function createScene(engine, canvas, BABYLON) {\r\n  console.clear();\r\n\r\n  var scene = new BABYLON.Scene(engine);\r\n  scene.useRightHandedSystem = true;\r\n  scene.clearColor = BABYLON.Color4.FromHexString(\"#D0D5BEFF\");\r\n\r\n  var camera = new BABYLON.ArcRotateCamera(\"camera\", BABYLON.Tools.ToRadians(90), Math.PI / 2, 3, BABYLON.Vector3.Zero(), scene);\r\n  camera.setTarget(new BABYLON.Vector3(0, 0.82, 0));\r\n  camera.attachControl(canvas, true);\r\n  camera.alpha = 1.57;\r\n  camera.beta = 1.2;\r\n  camera.radius = 15;\r\n  camera.inertia = 0.4;\r\n  camera.wheelDeltaPercentage = 0.3;\r\n  camera.panningSensibility = 10000;\r\n\r\n  var light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\r\n  light.intensity = 0.7;\r\n\r\n  var groundMaterial = new BABYLON.GridMaterial(\"groundMaterial\", scene);\r\n  groundMaterial.majorUnitFrequency = 5;\r\n  groundMaterial.minorUnitVisibility = 0.5;\r\n  groundMaterial.gridRatio = 2;\r\n  groundMaterial.opacity = 0.99;\r\n  groundMaterial.useMaxLine = true;\r\n\r\n  var ground = BABYLON.MeshBuilder.CreateGround(\"ground\", { width: 100, height: 100 }, scene, false);\r\n  ground.material = groundMaterial;\r\n  ground.isPickable = false;\r\n\r\n  const box = BABYLON.MeshBuilder.CreateBox(\"box\", {}, scene);\r\n  box.position.x = 3;\r\n  box.position.y = 1;\r\n  box.rotationQuaternion = BABYLON.Quaternion.Identity();\r\n\r\n  const box2 = BABYLON.MeshBuilder.CreateBox(\"box2\", {}, scene);\r\n  box2.rotation.x = Math.PI / 4;\r\n  box2.position.y = 1;\r\n  box2.rotationQuaternion = BABYLON.Quaternion.RotationYawPitchRoll(box2.rotation.y, box2.rotation.x, box2.rotation.z);\r\n\r\n  const box3 = BABYLON.MeshBuilder.CreateBox(\"box3\", {}, scene);\r\n  box3.position.x = -3;\r\n  box3.position.y = 1;\r\n  box3.rotation.z = Math.PI / 4;\r\n  box3.rotationQuaternion = BABYLON.Quaternion.RotationYawPitchRoll(box3.rotation.y, box3.rotation.x, box3.rotation.z);\r\n\r\n  const gizmoManager = new BABYLON.GizmoManager(scene);\r\n  gizmoManager.rotationGizmoEnabled = true;\r\n  gizmoManager.attachToMesh(box);\r\n\r\n  let limitDegree = 45;\r\n  let min = BABYLON.Tools.ToRadians(-limitDegree);\r\n  let max = BABYLON.Tools.ToRadians(limitDegree);\r\n\r\n  let lastValidRotation = box.rotationQuaternion.clone();\r\n\r\n  function clampRotationToRange(mesh, min, max) {\r\n    const rotation = mesh.rotationQuaternion.toEulerAngles();\r\n    const clampedRotation = new BABYLON.Vector3(\r\n      Math.max(min, Math.min(rotation.x, max)),\r\n      Math.max(min, Math.min(rotation.y, max)),\r\n      Math.max(min, Math.min(rotation.z, max))\r\n    );\r\n\r\n    if (rotation.equals(clampedRotation)) {\r\n      lastValidRotation.copyFrom(mesh.rotationQuaternion);\r\n    } else {\r\n      mesh.rotationQuaternion.copyFrom(lastValidRotation);\r\n    }\r\n  }\r\n\r\n  gizmoManager.gizmos.rotationGizmo.onDragObservable.add(() => {\r\n    if (gizmoManager.gizmos.rotationGizmo.attachedMesh.rotationQuaternion) {\r\n      clampRotationToRange(gizmoManager.gizmos.rotationGizmo.attachedMesh, min, max);\r\n    }\r\n  });\r\n\r\n  const advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI\");\r\n  const button = BABYLON.GUI.Button.CreateSimpleButton(\"resetButton\", \"Reset Rotation\");\r\n  button.width = \"150px\";\r\n  button.height = \"50px\";\r\n  button.left = \"-10px\";\r\n  button.color = \"white\";\r\n  button.background = \"blue\";\r\n  button.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT;\r\n  button.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER;\r\n\r\n  button.onPointerUpObservable.add(() => {\r\n    box.rotationQuaternion = BABYLON.Quaternion.Identity();\r\n    box2.rotationQuaternion = BABYLON.Quaternion.RotationYawPitchRoll(0, Math.PI / 4, 0);\r\n    box3.rotationQuaternion = BABYLON.Quaternion.RotationYawPitchRoll(0, 0, Math.PI / 4);\r\n  });\r\n\r\n  advancedTexture.addControl(button);\r\n\r\n  var input = new BABYLON.GUI.InputText(\"limit input\");\r\n  input.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_TOP;\r\n  input.horizontalAlignment = BABYLON.GUI.Control.VERTICAL_HORIZONTAL_TOP;\r\n  input.width = 0.15;\r\n  input.maxWidth = 0.15;\r\n  input.left = \"10px\";\r\n  input.top = \"10px\";\r\n  input.height = \"40px\";\r\n  input.text = \"Limit: \" + limitDegree;\r\n  input.color = \"white\";\r\n  input.background = \"green\";\r\n  advancedTexture.addControl(input);\r\n\r\n  input.onTextChangedObservable.add(function () {\r\n    var prefix = \"Limit: \";\r\n    var newValue = input.text.slice(prefix.length);\r\n\r\n    if (!input.text.startsWith(prefix)) {\r\n      input.text = prefix + limitDegree;\r\n    } else {\r\n      newValue = newValue.replace(/^0+/, \"\");\r\n      if (newValue.trim() === \"\" || isNaN(newValue)) {\r\n        limitDegree = 0;\r\n        input.text = prefix + limitDegree;\r\n      } else {\r\n        limitDegree = parseInt(newValue, 10);\r\n        input.text = prefix + limitDegree;\r\n      }\r\n    }\r\n\r\n    min = BABYLON.Tools.ToRadians(-limitDegree);\r\n    max = BABYLON.Tools.ToRadians(limitDegree);\r\n  });\r\n\r\n  return scene;\r\n}\r\n"],"names":["async","createScene","engine","canvas","BABYLON","console","clear","scene","Scene","useRightHandedSystem","clearColor","Color4","FromHexString","camera","ArcRotateCamera","Tools","ToRadians","Math","PI","Vector3","Zero","setTarget","attachControl","alpha","beta","radius","inertia","wheelDeltaPercentage","panningSensibility","HemisphericLight","intensity","groundMaterial","GridMaterial","majorUnitFrequency","minorUnitVisibility","gridRatio","opacity","useMaxLine","ground","MeshBuilder","CreateGround","width","height","material","isPickable","box","CreateBox","position","x","y","rotationQuaternion","Quaternion","Identity","box2","rotation","RotationYawPitchRoll","z","box3","gizmoManager","GizmoManager","rotationGizmoEnabled","attachToMesh","limitDegree","min","max","lastValidRotation","clone","gizmos","rotationGizmo","onDragObservable","add","attachedMesh","mesh","toEulerAngles","clampedRotation","equals","copyFrom","clampRotationToRange","advancedTexture","GUI","AdvancedDynamicTexture","CreateFullscreenUI","button","Button","CreateSimpleButton","left","color","background","horizontalAlignment","Control","HORIZONTAL_ALIGNMENT_RIGHT","verticalAlignment","VERTICAL_ALIGNMENT_CENTER","onPointerUpObservable","addControl","input","InputText","VERTICAL_ALIGNMENT_TOP","VERTICAL_HORIZONTAL_TOP","maxWidth","top","text","onTextChangedObservable","prefix","newValue","slice","startsWith","replace","trim","isNaN","parseInt"],"sourceRoot":""}