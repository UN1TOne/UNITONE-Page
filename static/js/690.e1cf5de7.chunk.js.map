{"version":3,"file":"static/js/690.e1cf5de7.chunk.js","mappings":"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","sources":["babylon/cascadedShadow.js"],"sourcesContent":["export async function createScene(engine, canvas, BABYLON) {\r\n  console.clear();\r\n  var scene = new BABYLON.Scene(engine);\r\n  scene.clearColor = new BABYLON.Color4(0.9, 0.89, 0.66);\r\n  scene.useRightHandedSystem = true;\r\n\r\n  var camera = new BABYLON.ArcRotateCamera(\"camera\", BABYLON.Tools.ToRadians(90), BABYLON.Tools.ToRadians(65), 10, BABYLON.Vector3.Zero(), scene);\r\n  camera.setTarget(new BABYLON.Vector3(0.2, 0.14, 0.18));\r\n  camera.alpha = 1.571;\r\n  camera.beta = 0.939;\r\n  camera.radius = 25.2;\r\n  camera.inertia = 0.4;\r\n  camera.wheelDeltaPercentage = 0.3;\r\n  camera.panningSensibility = 10000;\r\n  camera.minZ = 0.01;\r\n  camera.maxZ = 10000;\r\n\r\n  var light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\r\n  light.intensity = 0.7;\r\n\r\n  var dirLight = new BABYLON.DirectionalLight(\"dirLight\", new BABYLON.Vector3(-0.63, -0.7, -0.77), scene);\r\n  dirLight.position = new BABYLON.Vector3(-6.14, 24, 46.37);\r\n  dirLight.diffuse = BABYLON.Color3.FromHexString(\"#FFF8E3\");\r\n  dirLight.intensity = 1.5;\r\n  dirLight.shadowMaxZ = 300;\r\n\r\n  let darkness = -2.5;\r\n\r\n  let shadowGenerator_D = new BABYLON.CascadedShadowGenerator(1024, dirLight);\r\n  shadowGenerator_D.autoCalcDepthBounds = true;\r\n  shadowGenerator_D.lambda = 1;\r\n  shadowGenerator_D.bias = 0.001;\r\n  shadowGenerator_D._darkness = darkness;\r\n\r\n  let azimuth = 117;\r\n  let elevation = 209;\r\n\r\n  var ground = BABYLON.MeshBuilder.CreateGround(\"ground\", { width: 150, height: 150 }, scene);\r\n  ground.material = new BABYLON.PBRMaterial(\"ground\", scene);\r\n  ground.material.albedoTexture = new BABYLON.Texture(\"/images/textures/floor.png\", scene);\r\n  ground.material.metallic = 0;\r\n  ground.material.albedoTexture.uScale = 5;\r\n  ground.material.albedoTexture.vScale = 5;\r\n  ground.receiveShadows = true;\r\n\r\n  let rootMesh;\r\n\r\n  BABYLON.SceneLoader.ImportMeshAsync(\"\", \"https://raw.githubusercontent.com/AntonioToonit/Asset/master/\", \"stylized_desk.glb\").then((result) => {\r\n    rootMesh = result.meshes[0];\r\n    rootMesh.scaling.scaleInPlace(0.05);\r\n    rootMesh.position = new BABYLON.Vector3(2.5, 0, 4.4);\r\n\r\n    rootMesh.getChildMeshes().forEach((mesh) => {\r\n      shadowGenerator_D.addShadowCaster(mesh);\r\n      mesh.receiveShadows = true;\r\n    });\r\n\r\n    dirLight.getShadowGenerator().getShadowMap().resize(1024);\r\n    dirLight.getShadowGenerator().getShadowMap().scale(Math.pow(2, 2));\r\n  });\r\n\r\n  const advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI\");\r\n\r\n  const createVirtualJoystick = () => {\r\n    const size = 150;\r\n    const joyStickRadius = 25;\r\n\r\n    var panel = new BABYLON.GUI.StackPanel(\"Leg Length\");\r\n    panel.width = \"200px\";\r\n    panel.height = \"400px\";\r\n    panel.left = \"20px\";\r\n    panel.top = \"160px\";\r\n    panel.isVertical = true;\r\n    panel.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT;\r\n    panel.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_BOTTOM;\r\n    advancedTexture.addControl(panel);\r\n\r\n    var textBlock = new BABYLON.GUI.TextBlock(\"\");\r\n    textBlock.text = \"Darkness: \" + darkness;\r\n    textBlock.textHorizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    textBlock.color = \"White\";\r\n    textBlock.outlineColor = \"Black\";\r\n    textBlock.outlineWidth = 3;\r\n    textBlock.fontSize = 18;\r\n    textBlock.height = \"30px\";\r\n    textBlock.width = \"200px\";\r\n    textBlock.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    textBlock.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER;\r\n    panel.addControl(textBlock);\r\n\r\n    var slider = new BABYLON.GUI.Slider(\"Slider\");\r\n    slider.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    slider.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER;\r\n    slider.height = \"20px\";\r\n    slider.width = \"170px\";\r\n    slider.minimum = -5;\r\n    slider.maximum = 1;\r\n    slider.value = darkness;\r\n    slider.step = 0.1;\r\n    slider.isVertical = false;\r\n    slider.color = \"skyblue\";\r\n    slider.background = \"black\";\r\n    panel.addControl(slider);\r\n\r\n    slider.onValueChangedObservable.add(async function (value) {\r\n      darkness = value;\r\n      textBlock.text = \"Darkness: \" + darkness.toFixed(1);\r\n\r\n      shadowGenerator_D._darkness = darkness;\r\n    });\r\n\r\n    const joystickContainer = new BABYLON.GUI.Rectangle();\r\n    joystickContainer.width = `${size}px`;\r\n    joystickContainer.height = `${size}px`;\r\n    joystickContainer.cornerRadius = 10;\r\n    joystickContainer.color = \"skyblue\";\r\n    joystickContainer.thickness = 2;\r\n    joystickContainer.background = \"rgba(255, 255, 255, 0.2)\";\r\n    joystickContainer.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT;\r\n    joystickContainer.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_BOTTOM;\r\n    joystickContainer.left = \"-20px\";\r\n    joystickContainer.top = \"-20px\";\r\n    advancedTexture.addControl(joystickContainer);\r\n\r\n    const joystick = new BABYLON.GUI.Ellipse();\r\n    joystick.width = `${joyStickRadius * 2}px`;\r\n    joystick.height = `${joyStickRadius * 2}px`;\r\n    joystick.color = \"skyblue\";\r\n    joystick.thickness = 2;\r\n    joystick.background = \"rgba(255, 255, 255, 0.4)\";\r\n    joystickContainer.addControl(joystick);\r\n\r\n    let isDragging = false;\r\n    let startX = 0,\r\n      startY = 0;\r\n    let deltaX = 0,\r\n      deltaY = 0;\r\n\r\n    const getPointerPosition = () => {\r\n      return {\r\n        x: scene.pointerX,\r\n        y: scene.pointerY,\r\n      };\r\n    };\r\n\r\n    joystickContainer.onPointerDownObservable.add(() => {\r\n      const pos = getPointerPosition();\r\n      startX = pos.x;\r\n      startY = pos.y;\r\n      isDragging = true;\r\n    });\r\n\r\n    scene.onPointerMove = () => {\r\n      if (!isDragging) return;\r\n\r\n      const pos = getPointerPosition();\r\n\r\n      let moveX = pos.x - startX;\r\n      let moveY = pos.y - startY;\r\n\r\n      let newX = joystick.leftInPixels + moveX;\r\n      let newY = joystick.topInPixels + moveY;\r\n\r\n      // half of the container size - joystick radius\r\n      const maxDistance = size / 2 - joyStickRadius;\r\n\r\n      // set distance limit\r\n      const distance = Math.sqrt(newX * newX + newY * newY);\r\n      if (distance > maxDistance) {\r\n        const ratio = maxDistance / distance;\r\n        newX *= ratio;\r\n        newY *= ratio;\r\n      }\r\n\r\n      joystick.leftInPixels = newX;\r\n      joystick.topInPixels = newY;\r\n\r\n      startX = pos.x;\r\n      startY = pos.y;\r\n\r\n      let angleRad = Math.atan2(newY, newX);\r\n      let angleDeg = (BABYLON.Tools.ToDegrees(-angleRad) + 360) % 360; // 0~360 범위 보장\r\n\r\n      azimuth = angleDeg - 90;\r\n\r\n      let elevationRad = Math.atan2(distance, maxDistance * 0.3);\r\n      elevation = 270 - BABYLON.Tools.ToDegrees(elevationRad);\r\n\r\n      elevation = Math.max(181, Math.min(359, elevation));\r\n      console.log(elevation);\r\n      updateLightDirection(azimuth, elevation);\r\n    };\r\n\r\n    scene.onPointerUp = () => {\r\n      isDragging = false;\r\n    };\r\n\r\n    return { deltaX, deltaY };\r\n  };\r\n\r\n  createVirtualJoystick();\r\n\r\n  const updateLightDirection = (azimuthValue, elevationValue) => {\r\n    if (dirLight) {\r\n      if (elevationValue <= 181) {\r\n        elevationValue = 181;\r\n      } else if (elevationValue >= 359) {\r\n        elevationValue = 359;\r\n      }\r\n      const azimuthRad = BABYLON.Tools.ToRadians(azimuthValue);\r\n      const elevationRad = BABYLON.Tools.ToRadians(elevationValue);\r\n\r\n      const x = Math.cos(elevationRad) * Math.sin(azimuthRad);\r\n      const y = Math.sin(elevationRad);\r\n      const z = Math.cos(elevationRad) * Math.cos(azimuthRad);\r\n\r\n      dirLight.direction = new BABYLON.Vector3(x, y, z).normalize();\r\n    }\r\n  };\r\n\r\n  updateLightDirection(azimuth, elevation);\r\n\r\n  return scene;\r\n}\r\n"],"names":["async","createScene","engine","canvas","BABYLON","console","clear","scene","Scene","clearColor","Color4","useRightHandedSystem","camera","ArcRotateCamera","Tools","ToRadians","Vector3","Zero","setTarget","alpha","beta","radius","inertia","wheelDeltaPercentage","panningSensibility","minZ","maxZ","HemisphericLight","intensity","dirLight","DirectionalLight","position","diffuse","Color3","FromHexString","shadowMaxZ","darkness","shadowGenerator_D","CascadedShadowGenerator","autoCalcDepthBounds","lambda","bias","_darkness","azimuth","elevation","ground","MeshBuilder","CreateGround","width","height","rootMesh","material","PBRMaterial","albedoTexture","Texture","metallic","uScale","vScale","receiveShadows","SceneLoader","ImportMeshAsync","then","result","meshes","scaling","scaleInPlace","getChildMeshes","forEach","mesh","addShadowCaster","getShadowGenerator","getShadowMap","resize","scale","Math","pow","advancedTexture","GUI","AdvancedDynamicTexture","CreateFullscreenUI","createVirtualJoystick","panel","StackPanel","left","top","isVertical","horizontalAlignment","Control","HORIZONTAL_ALIGNMENT_RIGHT","verticalAlignment","VERTICAL_ALIGNMENT_BOTTOM","addControl","textBlock","TextBlock","text","textHorizontalAlignment","HORIZONTAL_ALIGNMENT_LEFT","color","outlineColor","outlineWidth","fontSize","VERTICAL_ALIGNMENT_CENTER","slider","Slider","minimum","maximum","value","step","background","onValueChangedObservable","add","toFixed","joystickContainer","Rectangle","cornerRadius","thickness","joystick","Ellipse","isDragging","startX","startY","getPointerPosition","x","pointerX","y","pointerY","onPointerDownObservable","pos","onPointerMove","moveX","moveY","newX","leftInPixels","newY","topInPixels","distance","sqrt","size","ratio","angleRad","atan2","angleDeg","ToDegrees","elevationRad","maxDistance","max","min","log","updateLightDirection","onPointerUp","azimuthValue","elevationValue","azimuthRad","cos","sin","z","direction","normalize"],"sourceRoot":""}