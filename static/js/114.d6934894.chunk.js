"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[114],{74114:(e,n,o)=>{async function i(e,n,o){console.clear();const i=new o.Scene(e);i.useRightHandedSystem=!0,i.clearColor=o.Color4.FromHexString("#3C3C3CFF");var r=new o.ArcRotateCamera("camera",o.Tools.ToRadians(90),o.Tools.ToRadians(65),10,o.Vector3.Zero(),i);let l,a,t;return r.setTarget(new o.Vector3(.19,4.25,-.35)),r.alpha=1.571,r.beta=1.473,r.radius=11.57,r.inertia=.4,r.wheelDeltaPercentage=.3,r.panningSensibility=0,r.minZ=.01,r.maxZ=1e4,r.upperBetaLimit=Math.PI/2,r.zoomToMouseLocation=!0,r.attachControl(n,!0),new o.HemisphericLight("light",new o.Vector3(0,1,0),i).intensity=.7,o.Effect.ShadersStore.clippingVertexShader="\n        precision highp float;\n\n        attribute vec3 position;\n        attribute vec3 normal;\n        attribute vec2 uv;\n\n        uniform mat4 worldViewProjection;\n        uniform mat4 world;\n        uniform vec4 u_ClipPlane; // \ud074\ub9ac\ud551 \ud3c9\uba74 (x, y, z, w)\n\n        varying vec2 vUV;\n        varying vec3 vNormal;\n        varying vec3 vPosition;\n\n        void main() {\n            vec4 worldPosition = world * vec4(position, 1.0);\n            vUV = uv;\n            vNormal = normalize(mat3(world) * normal);\n            vPosition = worldPosition.xyz;\n\n            gl_Position = worldViewProjection * vec4(position, 1.0);\n        }\n    ",o.Effect.ShadersStore.clippingFragmentShader="\n       precision highp float;\n\n        varying vec2 vUV;\n        varying vec3 vNormal;\n        varying vec3 vPosition;\n\n        uniform vec3 albedoColor;\n        uniform vec4 u_ClipPlane;\n\n        void main() {\n            if (dot(vec4(vPosition, 1.0), u_ClipPlane) < 0.0) {\n                discard;\n            }\n\n            vec3 normal = normalize(vNormal);\n\n            vec3 lightDir = normalize(vec3(0, 1.0, 0));\n            vec3 lightColor = vec3(1.0, 1.0, 1.0);\n\n            float lightFactor = clamp(dot(normal, lightDir) * 0.3 + 0.75, 0.6, 1.0);\n\n            vec3 finalColor = albedoColor * lightFactor * lightColor;\n\n            gl_FragColor = vec4(finalColor, 1.0);\n        }\n    ",o.Effect.ShadersStore.skinFragmentShader="\n       precision highp float;\n\n        varying vec2 vUV;\n        varying vec3 vNormal;\n        varying vec3 vPosition;\n        \n        uniform vec3 albedoColor;\n        \n        void main() {\n            vec3 normal = normalize(vNormal);\n        \n            vec3 lightDir = normalize(vec3(0, 1.0, 0));\n            vec3 lightColor = vec3(1.0, 1.0, 1.0); \n        \n            float lightFactor = clamp(dot(normal, lightDir) * 0.3 + 0.75, 0.6, 1.0);\n            \n            vec3 finalColor = albedoColor * lightFactor * lightColor;\n            \n            gl_FragColor = vec4(finalColor, 1.0);\n        }\n    ",o.SceneLoader.ImportMeshAsync("","https://raw.githubusercontent.com/UN1TOne/3DAsset/master/","female_anatomy.glb").then((e=>{l=e.meshes[0];let n=new o.Plane(1,0,0,0);const r=l.getChildMeshes(!1,(e=>"Object_2"===e.name))[0],c=l.getChildMeshes(!1,(e=>"Object_20"===e.name))[0],s=l.getChildMeshes(!1,(e=>"Object_5"===e.name))[0];if(r){a=r.clone("bodyMesh_cloned"),a.scaling.x=-1;let e=a.material;if(e){t=new o.ShaderMaterial("customPBR",i,{vertex:"clipping",fragment:"clipping"},{attributes:["position","normal"],uniforms:["worldViewProjection","world","u_ClipPlane","albedoColor"]}),t.setColor3("albedoColor",e.albedoColor),t.setVector4("u_ClipPlane",new o.Vector4(1,0,0,-2)),a.material=t;const n=new o.ShaderMaterial("customPBR",i,{vertex:"clipping",fragment:"skin"},{attributes:["position","normal"],uniforms:["worldViewProjection","world","albedoColor"]});n.setColor3("albedoColor",e.albedoColor),r.material=n}}if(c&&c.dispose(),s){s.clone("eyeMesh_cloned").scaling.x=-1}var v=o.GUI.AdvancedDynamicTexture.CreateFullscreenUI("UI"),m=new o.GUI.StackPanel;m.width="220px",m.horizontalAlignment=o.GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT,m.verticalAlignment=o.GUI.Control.VERTICAL_ALIGNMENT_CENTER,v.addControl(m);var d=new o.GUI.Slider;d.minimum=-.1,d.maximum=2,d.value=2,d.paddingTop="10px",d.height="30px",d.width="200px",d.color="green",d.onValueChangedObservable.add((function(e){n.d=e,t.setVector4("u_ClipPlane",new o.Vector4(1,0,0,-e))})),m.addControl(d)})),i}o.r(n),o.d(n,{createScene:()=>i})}}]);
//# sourceMappingURL=114.d6934894.chunk.js.map