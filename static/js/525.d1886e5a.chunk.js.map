{"version":3,"file":"static/js/525.d1886e5a.chunk.js","mappings":"sGAAOA,eAAeC,EAAYC,EAAQC,EAAQC,GAChD,IAAIC,EAAQ,IAAID,EAAQE,MAAMJ,GAC9BG,EAAME,WAAaH,EAAQI,OAAOC,cAAc,aAEhD,MAAMC,EAAS,IAAIN,EAAQO,WAAW,SAAU,IAAIP,EAAQQ,QAAQ,GAAK,GAAI,GAAIP,GACjFK,EAAOG,SAAW,IAAIT,EAAQQ,QAAQ,EAAG,GAAI,KAC7CF,EAAOI,MAAQ,GACfJ,EAAOK,KAAO,IACdL,EAAOM,cAAcb,GAAQ,GAEf,IAAIC,EAAQa,iBAAiB,QAAS,IAAIb,EAAQQ,QAAQ,EAAG,EAAG,GAAIP,GAElF,IAAIa,EAAMd,EAAQe,IAAIC,uBAAuBC,mBAAmB,MAC5DC,EAAe,IAAIlB,EAAQe,IAAII,OAAO,UAC1CD,EAAaE,QAAU,GACvBF,EAAaG,QAAU,IACvBH,EAAaI,MAAQ,GACrBJ,EAAaK,OAAS,OACtBL,EAAaM,MAAQ,QACrBN,EAAaO,IAAM,QACnBP,EAAaQ,oBAAsB1B,EAAQe,IAAIY,QAAQC,4BACvDV,EAAaW,kBAAoB7B,EAAQe,IAAIY,QAAQG,0BACrDhB,EAAIiB,WAAWb,GAEf,IAWIc,EAXAC,EAAiB,IAAIjC,EAAQe,IAAII,OAAO,YAC5Cc,EAAeb,QAAU,EACzBa,EAAeZ,QAAU,GACzBY,EAAeX,MAAQ,EACvBW,EAAeV,OAAS,OACxBU,EAAeT,MAAQ,QACvBS,EAAeR,IAAM,QACrBQ,EAAeP,oBAAsB1B,EAAQe,IAAIY,QAAQC,4BACzDK,EAAeJ,kBAAoB7B,EAAQe,IAAIY,QAAQG,0BACvDhB,EAAIiB,WAAWE,GAIfjC,EAAQkC,YAAYC,WAAW,GAAI,4DAA6D,kBAAmBlC,GAAO,SAAUmC,IAClIJ,EAAWI,EAAO,IACTC,QAAQC,aAAa,KAE9BF,EAAOG,SAASC,IACd,GAAIA,EAAKC,UAAYD,EAAKC,SAASC,cAAe,CAChD,MAAMC,EAAiB,IAAI3C,EAAQ4C,eACjC,eACA3C,EACA,CACE4C,OAAQ,SACRC,SAAU,UAEZ,CACEC,WAAY,CAAC,WAAY,SAAU,MACnCC,SAAU,CAAC,sBAAuB,iBAAkB,WAAY,SAAU,mBAI9EL,EAAeM,WAAW,gBAAiBT,EAAKC,SAASC,eACzDC,EAAeO,SAAS,SAAUhC,EAAaI,OAE/CrB,EAAMkD,yBAAyBC,KAAI,KACjC,MAAMC,EAAa,IAAIrD,EAAQsD,IAAIhD,EAAOG,SAAUH,EAAOiD,gBAAgBC,UAAW,IAChFC,EAAMxD,EAAMyD,YAAYL,GAE9B,GAAII,EAAIA,KAAOA,EAAIE,YAAa,CAC9B,MAAMC,EAAgB5D,EAAQQ,QAAQqD,qBAAqBJ,EAAIE,YAAa3D,EAAQ8D,OAAOC,OAAOvB,EAAKwB,mBACpFhE,EAAQQ,QAAQyD,SAAS3D,EAAOG,SAAUgD,EAAIE,aAEhD1B,EAAeX,MAC9BqB,EAAeuB,WAAW,WAAYN,GAEtCjB,EAAeuB,WAAW,WAAY,IAAIlE,EAAQQ,QAAQ,IAAM,IAAM,KAE1E,CAEAmC,EAAeO,SAAS,SAAUhC,EAAaI,MAAM,IAGvDkB,EAAKC,SAAWE,CAClB,KAGFX,EAASmC,SAAW,IAAInE,EAAQQ,QAAQ,EAAa,EAAV4D,KAAKC,GAAQ,EAC1D,IAyCArE,EAAQsE,OAAOC,aAAiC,mBAvC3B,kXAwCrBvE,EAAQsE,OAAOC,aAAmC,qBAzB3B,6oBA2BvB,MAAMC,EAAW,IAAIxE,EAAQyE,KAAK,OAAQxE,GAEpCyE,EAAO1E,EAAQ2E,YAAYC,aAAa,OAAQ,CAAEC,SAAU,GAAK5E,GACvEyE,EAAKjE,SAASqE,EAAI,EAElB,MAAMC,EAAO/E,EAAQ2E,YAAYK,eAAe,OAAQ,CAAEC,YAAa,IAAKC,eAAgB,IAAK3D,OAAQ,GAAKtB,GAC9G8E,EAAKtE,SAASqE,EAAI,GAElB,MAAMK,EAAUnF,EAAQ2E,YAAYK,eAAe,UAAW,CAAEH,SAAU,GAAKtD,OAAQ,KAAOtB,GAC9FkF,EAAQ1E,SAAS2E,KAAK,KAAM,IAAK,GACjCD,EAAQhB,SAASkB,EAAIjB,KAAKC,GAAK,EAE/B,MAAMiB,EAAWH,EAAQI,MAAM,YAC/BD,EAAS7E,SAAS+E,EAAI,KACtBF,EAASnB,SAASkB,GAAKjB,KAAKC,GAAK,EAEjC,MAAMoB,EAAUzF,EAAQ2E,YAAYK,eAAe,UAAW,CAAEH,SAAU,GAAKtD,OAAQ,KAAOtB,GAC9FwF,EAAQhF,SAAS2E,KAAK,IAAM,EAAG,GAE/B,MAAMM,EAAWD,EAAQF,MAAM,YAC/BG,EAASjF,SAAS+E,EAAI,GAEtB,MAAMG,EAAU3F,EAAQ2E,YAAYC,aAAa,UAAW,CAAEC,SAAU,IAAO5E,GAC/E0F,EAAQlF,SAAS2E,KAAK,GAAK,EAAG,GAE9B,MAAMQ,EAAWD,EAAQJ,MAAM,YAC/BK,EAASnF,SAAS+E,EAAI,GAEtB,MAAMK,EAAU7F,EAAQ2E,YAAYC,aAAa,UAAW,CAAEC,SAAU,IAAO5E,GAC/E4F,EAAQpF,SAAS2E,KAAK,GAAK,KAAM,IAEjC,MAAMU,EAAWD,EAAQN,MAAM,YAC/BO,EAASrF,SAAS+E,EAAI,GAEtB,MAAMO,EAAQ/F,EAAQ2E,YAAYqB,YAAY,QAAS,CAAEnB,SAAU,GAAKoB,UAAW,IAAOhG,GAC1F8F,EAAM5B,SAASqB,EAAIpB,KAAKC,GAAK,EAC7B0B,EAAMtF,SAAS2E,IAAI,EAAG,KAAM,GAE5B,MAAMc,EAAQ,IAAIlG,EAAQmG,iBAAiB,QAASlG,GACpDiG,EAAME,aAAe,IAAIpG,EAAQqG,OAAO,IAAM,IAAM,KACpDH,EAAMI,cAAgBtG,EAAQqG,OAAOE,QAErC,MAAMC,EAAQ,IAAIxG,EAAQmG,iBAAiB,QAASlG,GACpDuG,EAAMJ,aAAe,IAAIpG,EAAQqG,OAAO,EAAG,EAAG,GAC9CG,EAAMF,cAAgBtG,EAAQqG,OAAOE,QAErC,MAAME,EAAM,IAAIzG,EAAQmG,iBAAiB,MAAOlG,GAChDwG,EAAIL,aAAe,IAAIpG,EAAQqG,OAAO,EAAG,EAAG,GAC5CI,EAAIH,cAAgBtG,EAAQqG,OAAOE,QAEnC7B,EAAKgC,UAAUlC,GACfO,EAAK2B,UAAUlC,GACfW,EAAQuB,UAAUlC,GAClBc,EAASoB,UAAUlC,GACnBiB,EAAQiB,UAAUlC,GAClBkB,EAASgB,UAAUlC,GACnBmB,EAAQe,UAAUlC,GAClBoB,EAASc,UAAUlC,GACnBqB,EAAQa,UAAUlC,GAClBsB,EAASY,UAAUlC,GACnBuB,EAAMW,UAAUlC,GAEhBA,EAASnC,QAAQC,aAAa,IAC9BkC,EAAS/D,SAASqE,EAAI,GAEtBJ,EAAKjC,SAAWyD,EAChBnB,EAAKtC,SAAWyD,EAChBf,EAAQ1C,SAAWyD,EACnBZ,EAAS7C,SAAWyD,EACpBT,EAAQhD,SAAWyD,EACnBR,EAASjD,SAAWyD,EACpBP,EAAQlD,SAAWyD,EACnBN,EAASnD,SAAWyD,EACpBL,EAAQpD,SAAW+D,EACnBV,EAASrD,SAAW+D,EACpBT,EAAMtD,SAAWgE,EAEjB,IAAIE,EAAc,EA4BlB,OAzBA1G,EAAMkD,yBAAyBC,KAAI,KAAO,IAADwD,EAAAC,EACvC,MAAMC,EAAY7G,EAAM8G,YAAYC,eAC9BC,EAAkB3G,EAAOiD,cAAc,KACvC2D,EAAOjH,EAAMkH,iBAAiBF,GAEpC,IAAKC,GAAwB,IAAhBA,EAAKE,OAEhB,YADAT,EAAc,GAIhB,IAAIU,EAAWH,EAAKI,MAAM7D,GAAQA,EAAI8D,aAAe9D,EAAI8D,WAAWC,eAAexF,KACnFyF,QAAQC,IAAY,OAARL,QAAQ,IAARA,GAAoB,QAAZT,EAARS,EAAUE,kBAAU,IAAAX,OAAZ,EAARA,EAAsBe,MAClCF,QAAQC,IAAY,OAARL,QAAQ,IAARA,GAAoB,QAAZR,EAARQ,EAAUE,kBAAU,IAAAV,OAAZ,EAARA,EAAsBW,eAAehD,IAE7C6C,GAAYA,EAASE,WAAWC,eAAehD,IACjDmC,GAAeG,EACXH,GAlBa,OAmBfiB,MAAM,iBACNjB,GAAekB,MAGjBlB,EAAc,CAChB,IAGK1G,CACT,C","sources":["babylon/meshCutOut.js"],"sourcesContent":["export async function createScene(engine, canvas, BABYLON) {\r\n  var scene = new BABYLON.Scene(engine);\r\n  scene.clearColor = BABYLON.Color4.FromHexString(\"#9C8D7AFF\");\r\n\r\n  const camera = new BABYLON.FreeCamera(\"camera\", new BABYLON.Vector3(0.3, 2, -4), scene);\r\n  camera.position = new BABYLON.Vector3(0, 1, -2.5);\r\n  camera.speed = 0.1;\r\n  camera.minZ = 0.01;\r\n  camera.attachControl(canvas, true);\r\n\r\n  const light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(1, 1, 0), scene);\r\n\r\n  var gui = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI\");\r\n  var sliderRadius = new BABYLON.GUI.Slider(\"radius\");\r\n  sliderRadius.minimum = 0.5;\r\n  sliderRadius.maximum = 100;\r\n  sliderRadius.value = 70.0;\r\n  sliderRadius.height = \"20px\";\r\n  sliderRadius.width = \"200px\";\r\n  sliderRadius.top = \"-40px\";\r\n  sliderRadius.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n  sliderRadius.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_BOTTOM;\r\n  gui.addControl(sliderRadius);\r\n\r\n  var sliderDistance = new BABYLON.GUI.Slider(\"distance\");\r\n  sliderDistance.minimum = 1.0;\r\n  sliderDistance.maximum = 10.0;\r\n  sliderDistance.value = 3.0;\r\n  sliderDistance.height = \"20px\";\r\n  sliderDistance.width = \"200px\";\r\n  sliderDistance.top = \"-10px\";\r\n  sliderDistance.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n  sliderDistance.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_BOTTOM;\r\n  gui.addControl(sliderDistance);\r\n\r\n  var rootMesh;\r\n\r\n  BABYLON.SceneLoader.ImportMesh(\"\", \"https://raw.githubusercontent.com/UN1TOne/3DAsset/master/\", \"human_house.glb\", scene, function (meshes) {\r\n    rootMesh = meshes[0];\r\n    rootMesh.scaling.scaleInPlace(0.25);\r\n\r\n    meshes.forEach((mesh) => {\r\n      if (mesh.material && mesh.material.albedoTexture) {\r\n        const cutoutMaterial = new BABYLON.ShaderMaterial(\r\n          \"cutoutShader\",\r\n          scene,\r\n          {\r\n            vertex: \"cutout\",\r\n            fragment: \"cutout\",\r\n          },\r\n          {\r\n            attributes: [\"position\", \"normal\", \"uv\"],\r\n            uniforms: [\"worldViewProjection\", \"cameraPosition\", \"hitPoint\", \"radius\", \"albedoTexture\"],\r\n          }\r\n        );\r\n\r\n        cutoutMaterial.setTexture(\"albedoTexture\", mesh.material.albedoTexture);\r\n        cutoutMaterial.setFloat(\"radius\", sliderRadius.value);\r\n\r\n        scene.onBeforeRenderObservable.add(() => {\r\n          const forwardRay = new BABYLON.Ray(camera.position, camera.getForwardRay().direction, 10);\r\n          const hit = scene.pickWithRay(forwardRay);\r\n\r\n          if (hit.hit && hit.pickedPoint) {\r\n            const localHitPoint = BABYLON.Vector3.TransformCoordinates(hit.pickedPoint, BABYLON.Matrix.Invert(mesh.getWorldMatrix()));\r\n            const cameraDist = BABYLON.Vector3.Distance(camera.position, hit.pickedPoint);\r\n\r\n            if (cameraDist < sliderDistance.value) {\r\n              cutoutMaterial.setVector3(\"hitPoint\", localHitPoint);\r\n            } else {\r\n              cutoutMaterial.setVector3(\"hitPoint\", new BABYLON.Vector3(1000, 1000, 1000));\r\n            }\r\n          }\r\n\r\n          cutoutMaterial.setFloat(\"radius\", sliderRadius.value);\r\n        });\r\n\r\n        mesh.material = cutoutMaterial;\r\n      }\r\n    });\r\n\r\n    rootMesh.rotation = new BABYLON.Vector3(0, Math.PI * 2, 0);\r\n  });\r\n\r\n  const vertexShader = `\r\n        precision highp float;\r\n        attribute vec3 position;\r\n        attribute vec2 uv;\r\n        uniform mat4 worldViewProjection;\r\n        varying vec3 vPosition;\r\n        varying vec2 vUV;\r\n\r\n        void main() {\r\n            vPosition = position;\r\n            vUV = uv;\r\n            gl_Position = worldViewProjection * vec4(position, 1.0);\r\n        }\r\n    `;\r\n\r\n  const fragmentShader = `\r\n        precision highp float;\r\n        varying vec3 vPosition;\r\n        varying vec2 vUV;\r\n        uniform vec3 hitPoint;\r\n        uniform float radius;\r\n        uniform sampler2D albedoTexture;\r\n\r\n        void main() {\r\n             vec4 baseColor = texture2D(albedoTexture, vUV);\r\n\r\n            float dist = length(hitPoint - vPosition);\r\n            float edgeSmooth = smoothstep(radius - 1.0, radius, dist);\r\n\r\n            float alpha = mix(0.8, 1.0, edgeSmooth);\r\n\r\n            vec4 finalColor = vec4(baseColor.rgb, baseColor.a * alpha);\r\n\r\n            gl_FragColor = finalColor;\r\n\r\n            if (edgeSmooth < 0.1) discard;\r\n        }\r\n    `;\r\n\r\n  BABYLON.Effect.ShadersStore[\"cutoutVertexShader\"] = vertexShader;\r\n  BABYLON.Effect.ShadersStore[\"cutoutFragmentShader\"] = fragmentShader;\r\n\r\n  const bearRoot = new BABYLON.Mesh(\"root\", scene);\r\n\r\n  const head = BABYLON.MeshBuilder.CreateSphere(\"head\", { diameter: 2 }, scene);\r\n  head.position.y = 2;\r\n\r\n  const body = BABYLON.MeshBuilder.CreateCylinder(\"body\", { diameterTop: 1.5, diameterBottom: 1.5, height: 2 }, scene);\r\n  body.position.y = 0.5;\r\n\r\n  const armLeft = BABYLON.MeshBuilder.CreateCylinder(\"armLeft\", { diameter: 0.5, height: 1.5 }, scene);\r\n  armLeft.position.set(-1.35, 1.8, 0);\r\n  armLeft.rotation.z = Math.PI / 4;\r\n\r\n  const armRight = armLeft.clone(\"armRight\");\r\n  armRight.position.x = 1.35;\r\n  armRight.rotation.z = -Math.PI / 4;\r\n\r\n  const legLeft = BABYLON.MeshBuilder.CreateCylinder(\"legLeft\", { diameter: 0.7, height: 1.5 }, scene);\r\n  legLeft.position.set(-0.5, -1, 0);\r\n\r\n  const legRight = legLeft.clone(\"legRight\");\r\n  legRight.position.x = 0.5;\r\n\r\n  const earLeft = BABYLON.MeshBuilder.CreateSphere(\"earLeft\", { diameter: 0.8 }, scene);\r\n  earLeft.position.set(-0.8, 3, 0);\r\n\r\n  const earRight = earLeft.clone(\"earRight\");\r\n  earRight.position.x = 0.8;\r\n\r\n  const eyeLeft = BABYLON.MeshBuilder.CreateSphere(\"eyeLeft\", { diameter: 0.3 }, scene);\r\n  eyeLeft.position.set(-0.4, 2.3, -0.9);\r\n\r\n  const eyeRight = eyeLeft.clone(\"eyeRight\");\r\n  eyeRight.position.x = 0.4;\r\n\r\n  const mouth = BABYLON.MeshBuilder.CreateTorus(\"mouth\", { diameter: 0.6, thickness: 0.1 }, scene);\r\n  mouth.rotation.x = Math.PI / 2;\r\n  mouth.position.set(0, 1.8, -1);\r\n\r\n  const brown = new BABYLON.StandardMaterial(\"brown\", scene);\r\n  brown.diffuseColor = new BABYLON.Color3(0.43, 0.22, 0.05);\r\n  brown.specularColor = BABYLON.Color3.Black();\r\n\r\n  const black = new BABYLON.StandardMaterial(\"black\", scene);\r\n  black.diffuseColor = new BABYLON.Color3(0, 0, 0);\r\n  black.specularColor = BABYLON.Color3.Black();\r\n\r\n  const red = new BABYLON.StandardMaterial(\"red\", scene);\r\n  red.diffuseColor = new BABYLON.Color3(1, 0, 0);\r\n  red.specularColor = BABYLON.Color3.Black();\r\n\r\n  head.setParent(bearRoot);\r\n  body.setParent(bearRoot);\r\n  armLeft.setParent(bearRoot);\r\n  armRight.setParent(bearRoot);\r\n  legLeft.setParent(bearRoot);\r\n  legRight.setParent(bearRoot);\r\n  earLeft.setParent(bearRoot);\r\n  earRight.setParent(bearRoot);\r\n  eyeLeft.setParent(bearRoot);\r\n  eyeRight.setParent(bearRoot);\r\n  mouth.setParent(bearRoot);\r\n\r\n  bearRoot.scaling.scaleInPlace(0.1);\r\n  bearRoot.position.y = 0.5;\r\n\r\n  head.material = brown;\r\n  body.material = brown;\r\n  armLeft.material = brown;\r\n  armRight.material = brown;\r\n  legLeft.material = brown;\r\n  legRight.material = brown;\r\n  earLeft.material = brown;\r\n  earRight.material = brown;\r\n  eyeLeft.material = black;\r\n  eyeRight.material = black;\r\n  mouth.material = red;\r\n\r\n  let lookingTime = 0;\r\n  const requiredTime = 1500;\r\n\r\n  scene.onBeforeRenderObservable.add(() => {\r\n    const deltaTime = scene.getEngine().getDeltaTime();\r\n    const cameraDirection = camera.getForwardRay(100);\r\n    const hits = scene.multiPickWithRay(cameraDirection);\r\n\r\n    if (!hits || hits.length === 0) {\r\n      lookingTime = 0;\r\n      return;\r\n    }\r\n\r\n    let finalHit = hits.find((hit) => hit.pickedMesh && !hit.pickedMesh.isDescendantOf(rootMesh));\r\n    console.log(finalHit?.pickedMesh?.name);\r\n    console.log(finalHit?.pickedMesh?.isDescendantOf(bearRoot));\r\n\r\n    if (finalHit && finalHit.pickedMesh.isDescendantOf(bearRoot)) {\r\n      lookingTime += deltaTime;\r\n      if (lookingTime >= requiredTime) {\r\n        alert(\"You found me!\");\r\n        lookingTime = -Infinity;\r\n      }\r\n    } else {\r\n      lookingTime = 0;\r\n    }\r\n  });\r\n\r\n  return scene;\r\n}\r\n"],"names":["async","createScene","engine","canvas","BABYLON","scene","Scene","clearColor","Color4","FromHexString","camera","FreeCamera","Vector3","position","speed","minZ","attachControl","HemisphericLight","gui","GUI","AdvancedDynamicTexture","CreateFullscreenUI","sliderRadius","Slider","minimum","maximum","value","height","width","top","horizontalAlignment","Control","HORIZONTAL_ALIGNMENT_CENTER","verticalAlignment","VERTICAL_ALIGNMENT_BOTTOM","addControl","rootMesh","sliderDistance","SceneLoader","ImportMesh","meshes","scaling","scaleInPlace","forEach","mesh","material","albedoTexture","cutoutMaterial","ShaderMaterial","vertex","fragment","attributes","uniforms","setTexture","setFloat","onBeforeRenderObservable","add","forwardRay","Ray","getForwardRay","direction","hit","pickWithRay","pickedPoint","localHitPoint","TransformCoordinates","Matrix","Invert","getWorldMatrix","Distance","setVector3","rotation","Math","PI","Effect","ShadersStore","bearRoot","Mesh","head","MeshBuilder","CreateSphere","diameter","y","body","CreateCylinder","diameterTop","diameterBottom","armLeft","set","z","armRight","clone","x","legLeft","legRight","earLeft","earRight","eyeLeft","eyeRight","mouth","CreateTorus","thickness","brown","StandardMaterial","diffuseColor","Color3","specularColor","Black","black","red","setParent","lookingTime","_finalHit$pickedMesh","_finalHit$pickedMesh2","deltaTime","getEngine","getDeltaTime","cameraDirection","hits","multiPickWithRay","length","finalHit","find","pickedMesh","isDescendantOf","console","log","name","alert","Infinity"],"sourceRoot":""}