"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[994],{36994:(e,t,o)=>{async function a(e,t,o){console.clear();const a=new o.Scene(e);a.clearColor=o.Color4.FromHexString("#4E6D7FFF");var r=new o.ArcRotateCamera("camera",o.Tools.ToRadians(90),o.Tools.ToRadians(65),10,o.Vector3.Zero(),a);r.setTarget(new o.Vector3(-.08,.21,.07)),r.alpha=1.945,r.beta=1.404,r.radius=1.265,r.inertia=.4,r.wheelDeltaPercentage=.3,r.panningSensibility=1e4,r.minZ=.01,r.maxZ=100,r.upperBetaLimit=Math.PI/2,r.attachControl(t,!0),new o.HemisphericLight("light",new o.Vector3(0,1,0),a).intensity=.7;const n=[],i={};let l;o.SceneLoader.ImportMeshAsync("","https://raw.githubusercontent.com/UN1TOne/3DAsset/master/","undead_house.glb").then((e=>{l=e.meshes[0],l.normalizeToUnitCube(!0);const t=l.getChildMeshes(!1,(e=>e.material));t.forEach((e=>{n.push({name:e.name,material:e.material}),i[e.name]={material:new s(`ditherMaterial_${e.name}`,a,e.material),time:0}})),a.registerBeforeRender((()=>{for(let l of t){l.computeWorldMatrix(!0),l.refreshBoundingInfo();const t=i[l.name];if(!t)continue;const c=l.getVerticesData(o.VertexBuffer.PositionKind),d=l.getWorldMatrix();if(!c)continue;let h=Number.MAX_VALUE;for(let e=0;e<c.length;e+=3){const t=o.Vector3.TransformCoordinates(new o.Vector3(c[e],c[e+1],c[e+2]),d),a=o.Vector3.Distance(r.position,t);a<h&&(h=a)}if(h<.5)l.material instanceof s||(l.material=t.material),t.time+=a.getEngine().getDeltaTime()/1e3,t.material.setFloat("distance",h),t.material.setFloat("time",t.time),t.material.setVector3("cameraPosition",r.position),t.material.setMatrix("world",l.getWorldMatrix());else{var e;const t=null===(e=n.find((e=>e.name===l.name)))||void 0===e?void 0:e.material;t&&l.material!==t&&(l.material=t)}}}))}));class s extends o.ShaderMaterial{constructor(e,t,a){o.Effect.ShadersStore.ditherTransparencyVertexShader=c,o.Effect.ShadersStore.ditherTransparencyFragmentShader=d,super(e,t,"ditherTransparency",{attributes:["position","uv"],uniforms:["worldViewProjection","time","distance","albedoColor","hasTexture","textureSampler","baseAlpha"]}),this.setFloat("time",0),this.setFloat("distance",0);const r=(null===a||void 0===a?void 0:a.albedoColor)||new o.Color3(1,1,1);this.setColor3("albedoColor",r),null!==a&&void 0!==a&&a.albedoTexture?(this.setTexture("textureSampler",a.albedoTexture),this.setFloat("hasTexture",1)):this.setFloat("hasTexture",0),this.setFloat("baseAlpha",.5),this.alphaMode=o.Constants.ALPHA_COMBINE,this.backFaceCulling=!1,this.needDepthPrePass=!0}needAlphaBlending(){return!0}needAlphaTesting(){return!1}}const c="\n    precision highp float;\n    attribute vec3 position;\n    attribute vec2 uv;\n    uniform mat4 worldViewProjection;\n    varying vec2 vUV;\n\n    void main(void) {\n        gl_Position = worldViewProjection * vec4(position, 1.0);\n        vUV = uv;\n    }\n",d="\n    precision highp float;\n\n    varying vec2 vUV;\n    uniform float time;\n    uniform float distance;\n    uniform vec3 albedoColor;\n    uniform float hasTexture;\n    uniform sampler2D textureSampler;\n    uniform float baseAlpha;\n\n    const mat4 bayerMatrix = mat4(\n        0.0, 8.0, 2.0, 10.0,\n        12.0, 4.0, 14.0, 6.0,\n        3.0, 11.0, 1.0, 9.0,\n        15.0, 7.0, 13.0, 5.0\n    ) / 16.0;\n\n    void main(void) {\n        vec2 uv = vUV;\n        float distanceFactor = clamp(distance / 5.0, 0.0, 1.0);\n        float gradient = (uv.y + sin(time + uv.x * 10.0) * 0.1) * (1.0 - distanceFactor);\n        ivec2 pixelCoord = ivec2(gl_FragCoord.xy);\n        float threshold = bayerMatrix[pixelCoord.x % 4][pixelCoord.y % 4];\n\n        float alpha = step(threshold, gradient) * baseAlpha * (1.0 - distanceFactor);\n\n        vec3 baseColor = hasTexture > 0.5 ? texture2D(textureSampler, uv).rgb : albedoColor;\n        gl_FragColor = vec4(baseColor, alpha);\n    }\n";var h=o.GUI.AdvancedDynamicTexture.CreateFullscreenUI("UI"),m=new o.GUI.TextBlock("TB");return m.text="Zoom with scroll to see dithering :)",m.textHorizontalAlignment=o.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER,m.color="White",m.outlineColor="Black",m.outlineWidth=5,m.fontSize=25,m.height="30px",m.width="500px",m.horizontalAlignment=o.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER,m.verticalAlignment=o.GUI.Control.VERTICAL_ALIGNMENT_CENTER,h.addControl(m),a.registerBeforeRender((()=>{r.radius<1.265?m.text="":m.text="Zoom with scroll to see dithering :)"})),a}o.r(t),o.d(t,{createScene:()=>a})}}]);
//# sourceMappingURL=994.e7220734.chunk.js.map