{"version":3,"file":"static/js/158.6c91c081.chunk.js","mappings":"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","sources":["babylon/navigationGizmo.js"],"sourcesContent":["export async function createScene(engine, canvas, BABYLON) {\r\n  console.clear();\r\n\r\n  var scene = new BABYLON.Scene(engine);\r\n  scene.useRightHandedSystem = true;\r\n  scene.clearColor = new BABYLON.Color4(0.56, 0.56, 0.56);\r\n\r\n  var camera = new BABYLON.ArcRotateCamera(\"MainCamera\", Math.PI / 4, Math.PI / 3, 10, BABYLON.Vector3.Zero(), scene);\r\n  camera.inertia = 0.4;\r\n  camera.wheelDeltaPercentage = 0.3;\r\n  camera.panningSensibility = 10000;\r\n\r\n  camera.attachControl(canvas, true);\r\n\r\n  var light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0.5, 1, 0), scene);\r\n  light.intensity = 0.7;\r\n\r\n  var mat = new BABYLON.StandardMaterial(\"mat\", scene);\r\n  var texture = new BABYLON.Texture(\"https://i.imgur.com/lXehwjZ.jpg\", scene);\r\n  mat.diffuseTexture = texture;\r\n\r\n  var columns = 6;\r\n  var rows = 1;\r\n\r\n  var faceUV = new Array(6);\r\n\r\n  for (var i = 0; i < 6; i++) {\r\n    faceUV[i] = new BABYLON.Vector4(i / columns, 0, (i + 1) / columns, 1 / rows);\r\n  }\r\n  var options = {\r\n    faceUV: faceUV,\r\n    wrap: true,\r\n  };\r\n\r\n  var box = BABYLON.MeshBuilder.CreateBox(\"box\", options, scene);\r\n  box.position.y = 1;\r\n  box.material = mat;\r\n\r\n  var ground = BABYLON.MeshBuilder.CreateGround(\"ground\", { width: 6, height: 6 }, scene);\r\n\r\n  var axisCamera = new BABYLON.ArcRotateCamera(\"AxisCamera\", 0, 0, 5, BABYLON.Vector3.Zero(), scene);\r\n  axisCamera.mode = BABYLON.Camera.ORTHOGRAPHIC_CAMERA;\r\n  axisCamera.orthoLeft = -2;\r\n  axisCamera.orthoRight = 2;\r\n  axisCamera.orthoTop = 2;\r\n  axisCamera.orthoBottom = -2;\r\n  axisCamera.setPosition(new BABYLON.Vector3(5, 5, 5));\r\n  axisCamera.layerMask = 0x20000000;\r\n\r\n  scene.activeCameras = [camera, axisCamera];\r\n\r\n  var axisRoot = new BABYLON.TransformNode(\"axisRoot\", scene);\r\n  var axisSize = 1.5;\r\n\r\n  let hoverdAxis;\r\n  let red = \"#f43455\";\r\n  let green = \"#658a1a\";\r\n  let blue = \"#2d8aed\";\r\n\r\n  let red_neg = \"#d12e4a\";\r\n  let green_neg = \"#547516\";\r\n  let blue_neg = \"#2475c4\";\r\n\r\n  let isFocusedAxis = \"\";\r\n\r\n  scene.onPointerObservable.add((evt) => {\r\n    switch (evt.type) {\r\n      case BABYLON.PointerEventTypes.POINTERDOWN:\r\n        let direction;\r\n        isFocusedAxis = hoverdAxis;\r\n\r\n        switch (hoverdAxis) {\r\n          case \"xAxis\":\r\n            direction = new BABYLON.Vector3(1, 0, 0);\r\n            break;\r\n          case \"yAxis\":\r\n            direction = new BABYLON.Vector3(0, 1, 0);\r\n            break;\r\n          case \"zAxis\":\r\n            direction = new BABYLON.Vector3(0, 0, 1);\r\n            break;\r\n          case \"neg_xAxis\":\r\n            direction = new BABYLON.Vector3(-1, 0, 0);\r\n            break;\r\n          case \"neg_yAxis\":\r\n            direction = new BABYLON.Vector3(0, -1, 0);\r\n            break;\r\n          case \"neg_zAxis\":\r\n            direction = new BABYLON.Vector3(0, 0, -1);\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n        if (!!direction) {\r\n          focusOnAxis(direction, hoverdAxis);\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n\r\n  scene.onBeforeRenderObservable.add(() => {\r\n    [\"xAxis\", \"yAxis\", \"zAxis\"].forEach((axis) => {\r\n      let axisDisplay = scene.getMeshByName(axis + \"Display\");\r\n      let axisDisplay_neg = scene.getMeshByName(axis + \"Display_Negative\");\r\n\r\n      [axisDisplay, axisDisplay_neg].forEach((display) => {\r\n        if (display) {\r\n          display.lookAt(camera.position.normalize().scaleInPlace(5));\r\n\r\n          if (display.rotationQuaternion) {\r\n            let extraRotation = BABYLON.Quaternion.RotationAxis(BABYLON.Axis.X, -Math.PI / 2);\r\n            display.rotationQuaternion = display.rotationQuaternion.multiply(extraRotation);\r\n          } else {\r\n            display.rotation.x -= Math.PI / 2;\r\n          }\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  // axes setting\r\n  function createAxis(name, color, direction) {\r\n    var axis = BABYLON.MeshBuilder.CreateLines(\r\n      name,\r\n      {\r\n        points: [BABYLON.Vector3.Zero(), direction.scale(axisSize)],\r\n      },\r\n      scene\r\n    );\r\n    axis.color = color;\r\n    axis.parent = axisRoot;\r\n    axis.layerMask = 0x20000000;\r\n\r\n    const axisDisplay = BABYLON.MeshBuilder.CreateCylinder(name + \"Display\", { diameter: 0.7, height: 0.01 });\r\n    const axisDisplay_neg = BABYLON.MeshBuilder.CreateCylinder(name + \"Display_Negative\", { diameter: 0.6, height: 0.01 });\r\n\r\n    if (name === \"xAxis\") {\r\n      axisDisplay.position.x = 1.6;\r\n      axisDisplay_neg.position.x = -1.6;\r\n    } else if (name === \"yAxis\") {\r\n      axisDisplay.position.y = 1.6;\r\n      axisDisplay_neg.position.y = -1.6;\r\n    } else if (name === \"zAxis\") {\r\n      axisDisplay.position.z = 1.6;\r\n      axisDisplay_neg.position.z = -1.6;\r\n    }\r\n    axisDisplay.parent = axis;\r\n    axisDisplay.layerMask = 0x20000000;\r\n    axisDisplay.renderingGroupId = 1;\r\n    axisDisplay.actionManager = new BABYLON.ActionManager(scene);\r\n    axisDisplay.actionManager.registerAction(\r\n      new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnPointerOverTrigger, function (evt) {\r\n        hoverdAxis = axis.name.replace(\"ClickArea\", \"\");\r\n      })\r\n    );\r\n    axisDisplay.actionManager.registerAction(\r\n      new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnPointerOutTrigger, function (evt) {\r\n        hoverdAxis = \"\";\r\n      })\r\n    );\r\n\r\n    axisDisplay_neg.parent = axis;\r\n    axisDisplay_neg.layerMask = 0x20000000;\r\n    axisDisplay_neg.renderingGroupId = 1;\r\n    axisDisplay_neg.actionManager = new BABYLON.ActionManager(scene);\r\n    axisDisplay_neg.actionManager.registerAction(\r\n      new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnPointerOverTrigger, function (evt) {\r\n        hoverdAxis = \"neg_\" + axis.name.replace(\"ClickArea\", \"\");\r\n\r\n        switch (axis.name.replace(\"ClickArea\", \"\")) {\r\n          case \"xAxis\":\r\n            if (neg_xLabel) {\r\n              neg_xLabel.text = \"-X\";\r\n            }\r\n            break;\r\n          case \"yAxis\":\r\n            if (neg_yLabel) {\r\n              neg_yLabel.text = \"-Y\";\r\n            }\r\n            break;\r\n          case \"zAxis\":\r\n            if (neg_zLabel) {\r\n              neg_zLabel.text = \"-Z\";\r\n            }\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      })\r\n    );\r\n    axisDisplay_neg.actionManager.registerAction(\r\n      new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnPointerOutTrigger, function (evt) {\r\n        hoverdAxis = \"\";\r\n        if (neg_xLabel && isFocusedAxis !== \"neg_xAxis\") {\r\n          neg_xLabel.text = \"\";\r\n        }\r\n        if (neg_yLabel && isFocusedAxis !== \"neg_yAxis\") {\r\n          neg_yLabel.text = \"\";\r\n        }\r\n        if (neg_zLabel && isFocusedAxis !== \"neg_zAxis\") {\r\n          neg_zLabel.text = \"\";\r\n        }\r\n      })\r\n    );\r\n\r\n    var axisMat_neg = new BABYLON.PBRMaterial(name + \"Mat_neg\", scene);\r\n    axisMat_neg.metallic = 0;\r\n    axisMat_neg.unlit = true;\r\n\r\n    var axisMat = new BABYLON.PBRMaterial(name + \"Mat\", scene);\r\n    axisMat.metallic = 0;\r\n    axisMat.unlit = true;\r\n\r\n    switch (name) {\r\n      case \"xAxis\":\r\n        axisMat.albedoColor = BABYLON.Color3.FromHexString(red);\r\n        axisMat_neg.albedoColor = BABYLON.Color3.FromHexString(red_neg);\r\n        break;\r\n      case \"yAxis\":\r\n        axisMat.albedoColor = BABYLON.Color3.FromHexString(green);\r\n        axisMat_neg.albedoColor = BABYLON.Color3.FromHexString(green_neg);\r\n        break;\r\n      case \"zAxis\":\r\n        axisMat.albedoColor = BABYLON.Color3.FromHexString(blue);\r\n        axisMat_neg.albedoColor = BABYLON.Color3.FromHexString(blue_neg);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    axisDisplay.material = axisMat;\r\n    axisDisplay_neg.material = axisMat_neg;\r\n\r\n    var clickArea = BABYLON.MeshBuilder.CreateBox(name + \"ClickArea\", { size: 1 }, scene);\r\n    clickArea.position = direction.scale(axisSize / 2);\r\n    clickArea.scaling = new BABYLON.Vector3(0.1, axisSize, 0.1);\r\n    if (name === \"xAxis\") {\r\n      clickArea.rotation.x = Math.PI / 2;\r\n      clickArea.rotation.y = Math.PI / 2;\r\n    } else if (name === \"zAxis\") {\r\n      clickArea.rotation.x = Math.PI / 2;\r\n      clickArea.rotation.y = Math.PI / 2;\r\n      clickArea.rotation.z = Math.PI / 2;\r\n    }\r\n\r\n    clickArea.visibility = 0;\r\n    clickArea.parent = axisRoot;\r\n    clickArea.layerMask = 0x20000000;\r\n\r\n    clickArea.actionManager = new BABYLON.ActionManager(scene);\r\n    clickArea.actionManager.registerAction(\r\n      new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnPointerOverTrigger, function (evt) {\r\n        hoverdAxis = clickArea.name.replace(\"ClickArea\", \"\");\r\n      })\r\n    );\r\n    clickArea.actionManager.registerAction(\r\n      new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnPointerOutTrigger, function (evt) {\r\n        hoverdAxis = \"\";\r\n      })\r\n    );\r\n    return axis;\r\n  }\r\n\r\n  var xAxis = createAxis(\"xAxis\", BABYLON.Color3.FromHexString(red), new BABYLON.Vector3(1, 0, 0));\r\n  var yAxis = createAxis(\"yAxis\", BABYLON.Color3.FromHexString(green), new BABYLON.Vector3(0, 1, 0));\r\n  var zAxis = createAxis(\"zAxis\", BABYLON.Color3.FromHexString(blue), new BABYLON.Vector3(0, 0, 1));\r\n\r\n  // focusing camera when click the axis\r\n  function focusOnAxis(direction, axis) {\r\n    var targetAlpha = Math.atan2(direction.z, direction.x);\r\n    var targetBeta = Math.acos(direction.y);\r\n\r\n    if (neg_xLabel) {\r\n      neg_xLabel.text = \"\";\r\n    }\r\n    if (neg_yLabel) {\r\n      neg_yLabel.text = \"\";\r\n    }\r\n    if (neg_zLabel) {\r\n      neg_zLabel.text = \"\";\r\n    }\r\n\r\n    const onAxisFocusingAnimEnd = () => {\r\n      setTimeout(() => {\r\n        switch (axis) {\r\n          case \"neg_xAxis\":\r\n            if (xLabel) {\r\n              xLabel.text = \"-X\";\r\n            }\r\n            break;\r\n          case \"neg_yAxis\":\r\n            if (yLabel) {\r\n              yLabel.text = \"-Y\";\r\n            }\r\n\r\n            break;\r\n          case \"neg_zAxis\":\r\n            if (zLabel) {\r\n              zLabel.text = \"-Z\";\r\n            }\r\n\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }, 100);\r\n    };\r\n\r\n    BABYLON.Animation.CreateAndStartAnimation(\r\n      \"alphaAnim\",\r\n      camera,\r\n      \"alpha\",\r\n      90,\r\n      30,\r\n      camera.alpha,\r\n      targetAlpha,\r\n      BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT,\r\n      new BABYLON.ElasticEase(0.1, 0.1),\r\n      onAxisFocusingAnimEnd\r\n    );\r\n    BABYLON.Animation.CreateAndStartAnimation(\r\n      \"betaAnim\",\r\n      camera,\r\n      \"beta\",\r\n      90,\r\n      30,\r\n      camera.beta,\r\n      targetBeta,\r\n      BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT,\r\n      new BABYLON.ElasticEase(0.1, 0.1),\r\n      onAxisFocusingAnimEnd\r\n    );\r\n  }\r\n\r\n  scene.onBeforeRenderObservable.add(() => {\r\n    axisCamera.alpha = camera.alpha;\r\n    axisCamera.beta = camera.beta;\r\n  });\r\n\r\n  // 카메라 움직임 감지 for negAxis textblock 초기화\r\n  let lastAlpha = camera.alpha;\r\n  let lastBeta = camera.beta;\r\n  let lastRadius = camera.radius;\r\n\r\n  const threshold = 0.001;\r\n\r\n  camera.onViewMatrixChangedObservable.add(() => {\r\n    if (\r\n      Math.abs(camera.alpha - lastAlpha) > threshold ||\r\n      Math.abs(camera.beta - lastBeta) > threshold ||\r\n      Math.abs(camera.radius - lastRadius) > threshold\r\n    ) {\r\n      lastAlpha = camera.alpha;\r\n      lastBeta = camera.beta;\r\n      lastRadius = camera.radius;\r\n\r\n      isFocusedAxis = \"\";\r\n\r\n      if (xLabel) xLabel.text = \"X\";\r\n      if (yLabel) yLabel.text = \"Y\";\r\n      if (zLabel) zLabel.text = \"Z\";\r\n    } else {\r\n      return;\r\n    }\r\n  });\r\n\r\n  // 카메라 뷰포트 설정정\r\n  camera.viewport = new BABYLON.Viewport(0, 0, 1, 1);\r\n  let viewportSize = 0.2;\r\n  axisCamera.viewport = new BABYLON.Viewport(0.8, 0.8, viewportSize, viewportSize); // World Axis\r\n\r\n  let currentWidthSize = 0;\r\n  let limitWidthSize = 0;\r\n\r\n  var updateViewport = function () {\r\n    var screenWidth = engine.getRenderWidth();\r\n    var screenHeight = engine.getRenderHeight();\r\n    var maxSize = 200;\r\n    var minSize = 65;\r\n    currentWidthSize = Math.min(screenWidth * 0.15, screenHeight * 0.3, maxSize);\r\n    var limitWidthSize = Math.max(Math.min(screenWidth * 0.15, screenHeight * 0.3, maxSize), minSize);\r\n    var right = screenWidth - limitWidthSize; // screenWidth - limitWidthSize - 200;\r\n    var top = screenHeight - limitWidthSize;\r\n    axisCamera.viewport = new BABYLON.Viewport(right / screenWidth, top / screenHeight, limitWidthSize / screenWidth, limitWidthSize / screenHeight);\r\n  };\r\n\r\n  updateViewport();\r\n\r\n  engine.onResizeObservable.add(() => {\r\n    updateViewport();\r\n    if (currentWidthSize >= 200) {\r\n      if (xLabel) xLabel.fontSize = \"130px\";\r\n      if (yLabel) yLabel.fontSize = \"130px\";\r\n      if (zLabel) zLabel.fontSize = \"130px\";\r\n    } else {\r\n      if (xLabel) xLabel.fontSize = \"100px\";\r\n      if (yLabel) yLabel.fontSize = \"100px\";\r\n      if (zLabel) zLabel.fontSize = \"100px\";\r\n    }\r\n  });\r\n\r\n  // GUI for 축에 표시할 텍스트\r\n  let axisGui = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI\");\r\n  axisGui.layer.layerMask = axisCamera.layerMask;\r\n\r\n  let xLabel, yLabel, zLabel, neg_xLabel, neg_yLabel, neg_zLabel;\r\n\r\n  function addAxisLabel(mesh, text) {\r\n    let textBlock = new BABYLON.GUI.TextBlock();\r\n    textBlock.text = text.startsWith(\"-\") ? \"\" : text;\r\n    textBlock.name = text;\r\n    textBlock.color = \"black\";\r\n    textBlock.fontSize = \"100px\";\r\n    textBlock.textHorizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    textBlock.textVerticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER;\r\n\r\n    axisGui.addControl(textBlock);\r\n    textBlock.linkWithMesh(mesh);\r\n\r\n    switch (text) {\r\n      case \"X\":\r\n        xLabel = textBlock;\r\n        break;\r\n      case \"-X\":\r\n        neg_xLabel = textBlock;\r\n        break;\r\n      case \"Y\":\r\n        yLabel = textBlock;\r\n        break;\r\n      case \"-Y\":\r\n        neg_yLabel = textBlock;\r\n        break;\r\n      case \"Z\":\r\n        zLabel = textBlock;\r\n        break;\r\n      case \"-Z\":\r\n        neg_zLabel = textBlock;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  [\"xAxis\", \"yAxis\", \"zAxis\"].forEach((axis) => {\r\n    let axisDisplay = scene.getMeshByName(axis + \"Display\");\r\n    if (axisDisplay) addAxisLabel(axisDisplay, axis.replace(\"Axis\", \"\").toUpperCase());\r\n\r\n    let axisDisplay_neg = scene.getMeshByName(axis + \"Display_Negative\");\r\n    if (axisDisplay_neg) addAxisLabel(axisDisplay_neg, \"-\" + axis.replace(\"Axis\", \"\").toUpperCase());\r\n  });\r\n\r\n  return scene;\r\n}\r\n"],"names":["async","createScene","engine","canvas","BABYLON","console","clear","scene","Scene","useRightHandedSystem","clearColor","Color4","camera","ArcRotateCamera","Math","PI","Vector3","Zero","inertia","wheelDeltaPercentage","panningSensibility","attachControl","HemisphericLight","intensity","mat","StandardMaterial","texture","Texture","diffuseTexture","faceUV","Array","i","Vector4","options","wrap","box","MeshBuilder","CreateBox","position","y","material","CreateGround","width","height","axisCamera","mode","Camera","ORTHOGRAPHIC_CAMERA","orthoLeft","orthoRight","orthoTop","orthoBottom","setPosition","layerMask","activeCameras","axisRoot","TransformNode","hoverdAxis","red","green","blue","isFocusedAxis","createAxis","name","color","direction","axis","CreateLines","points","scale","parent","axisDisplay","CreateCylinder","diameter","axisDisplay_neg","x","z","renderingGroupId","actionManager","ActionManager","registerAction","ExecuteCodeAction","OnPointerOverTrigger","evt","replace","OnPointerOutTrigger","neg_xLabel","text","neg_yLabel","neg_zLabel","axisMat_neg","PBRMaterial","metallic","unlit","axisMat","albedoColor","Color3","FromHexString","clickArea","size","axisSize","scaling","rotation","visibility","onPointerObservable","add","type","PointerEventTypes","POINTERDOWN","targetAlpha","atan2","targetBeta","acos","onAxisFocusingAnimEnd","setTimeout","xLabel","yLabel","zLabel","Animation","CreateAndStartAnimation","alpha","ANIMATIONLOOPMODE_CONSTANT","ElasticEase","beta","focusOnAxis","onBeforeRenderObservable","forEach","getMeshByName","display","lookAt","normalize","scaleInPlace","rotationQuaternion","extraRotation","Quaternion","RotationAxis","Axis","X","multiply","lastAlpha","lastBeta","lastRadius","radius","threshold","onViewMatrixChangedObservable","abs","viewport","Viewport","currentWidthSize","updateViewport","screenWidth","getRenderWidth","screenHeight","getRenderHeight","min","limitWidthSize","max","right","top","onResizeObservable","fontSize","axisGui","GUI","AdvancedDynamicTexture","CreateFullscreenUI","addAxisLabel","mesh","textBlock","TextBlock","startsWith","textHorizontalAlignment","Control","HORIZONTAL_ALIGNMENT_CENTER","textVerticalAlignment","VERTICAL_ALIGNMENT_CENTER","addControl","linkWithMesh","layer","toUpperCase"],"sourceRoot":""}